extends _index.pug

block state
  - const scripts = ['index.min.js']
  - const styles = ['../layout/index.min.css', 'index.min.css']
  - const theme = '#000'
  - const title = 'Option Picker ' + version

block script
  script
    | const picker = new OptionPicker(document.forms[0].option);
    | picker.on('change', function (value) {
    |     console.log(value);
    | });

block style
  style
    | body {
    |   margin-left: auto;
    |   margin-right: auto;
    |   max-width: 60rem;
    | }
    | .option-picker {
    |   border-width: 2px;
    |   flex: 1;
    | }
    | .option-picker__arrow,
    | .option-picker__text,
    | .option-picker__value {
    |   border-width: 0;
    |   padding: 0 0.5em;
    | }
    | .option-picker--focus {
    |   border-color: #00f;
    | }
    | .option-picker--focus .option-picker__options {
    |   border-color: #00f;
    | }
    | .option-picker--focus .option-picker__value {
    |   background: 0 0;
    |   outline: 0;
    | }
    | .option-picker__option {
    |   border: 0;
    |   padding: 0 0.5em;
    | }
    | .option-picker__option:focus,
    | .option-picker__option:hover {
    |   background: #00f;
    |   color: #fff;
    |   outline: 0;
    | }
    | .option-picker__option-group {
    |   border: 0;
    |   gap: 0;
    |   padding: 0;
    | }
    | .option-picker__option-group::before {
    |   border: 0;
    |   padding: 0 0.5em;
    | }
    | .option-picker__option-group .option-picker__option {
    |   padding-left: 1em;
    | }
    | .option-picker__option--selected {
    |   background: #000;
    |   color: #fff;
    |   outline: 0;
    | }
    | .option-picker__options {
    |   background: #fff;
    |   gap: 0;
    |   left: -2px;
    |   min-width: calc(100% + 4px);
    |   padding: 0;
    | }
    | .option-picker__values {
    |   padding: 0;
    | }

block content
  p(role='alert') Do you like this project? Please support my #[a(href='https://github.com/mecha-cms') Mecha CMS] project too. Thank you!
  header
    hgroup
      h1= title
      p Accessible custom #[code &lt;select&gt;] (and #[code &lt;input list&gt;]) element.
  main
    form(method='get' target='_blank')
      p(role='group')
        select(name='option')
          option(value='1') Option 1
          option(value='2') Option 2
          optgroup(label='Group A')
            option(value='A:1') Option A:1
            option(value='A:2') Option A:2
            option(value='A:3') Option A:3
          option(value='3') Option 3
          option(disabled value='4') Option 4
          option Option 5
        = ' '
        button(type='submit') Submit
        = ' '
        button(type='reset') Reset
    h2#usage
      a(href='#usage') #
      = ' Usage'
    div(role='note')
      p #[strong Note:] CSS variables have been removed since version 2.0.0. From now on, I will only provide a minimal style just to make viable interaction. Expect it to look ugly by default. The main goal of this application is to be able to integrate it seamlessly into your web design. By providing a minimal style, it is easy to add other styles to it to adapt it to your own web design. Have a look at the source code on this page to see how I adapted the style to resemble the default style of the previous version.
    h3 Browser
    pre: code
      | &lt;!DOCTYPE html&gt;
      | &lt;html dir="ltr"&gt;
      |   &lt;head&gt;
      |     &lt;meta charset="utf-8"&gt;
      |     &lt;link href="#[a(href='index.min.css' target='_blank') ./index.min.css]" rel="stylesheet"&gt;
      |     &lt;style&gt;
      |       .option-picker {
      |         width: 100%;
      |       }
      |       .option-picker__options {
      |         background: #fff;
      |       }
      |     &lt;/style&gt;
      |   &lt;/head&gt;
      |   &lt;body&gt;
      |     &lt;p&gt;
      |       &lt;select&gt;
      |         &lt;option&gt;
      |           Option 1
      |         &lt;/option&gt;
      |         &lt;option&gt;
      |           Option 2
      |         &lt;/option&gt;
      |         &lt;option value="3"&gt;
      |           Option 3
      |         &lt;/option&gt;
      |       &lt;/select&gt;
      |     &lt;/p&gt;
      |     &lt;script src="#[a(href='index.min.js' target='_blank') ./index.min.js]"&gt;&lt;/script&gt;
      |     &lt;script&gt;
      |       const picker = new OptionPicker(document.querySelector('select'));
      |     &lt;/script&gt;
      |   &lt;/body&gt;
      | &lt;/html&gt;
    h3 Node.js
    p Functions and methods in this application are mostly native JavaScript and are intended for use by the browser. Node.js doesn’t know about the DOM, so this kind of practice will probably be used more often to build new browser packages than to be used directly in the Node.js server.
    h4 CommonJS
    pre: code
      | const OptionPicker = require('@taufik-nurrohman/option-picker').default;
      |
      | const picker = new OptionPicker(document.querySelector('select'));
    h4 ECMAScript
    pre: code
      | import OptionPicker from '@taufik-nurrohman/option-picker';
      |
      | const picker = new OptionPicker(document.querySelector('select'));
    h2#tests
      a(href='#tests') #
      = ' Tests'
    ul
      li: a(href='test.html' target='_blank') No Idea?
    h2#tweaks
      a(href='#tweaks') #
      = ' Tweaks'
    ul
      li: a(href='tweak/bootstrap5.html' target='_blank') Bootstrap v5.3 Style
    h2#constructor
      a(href='#constructor') #
      = ' Constructor'
    pre: code
      | const picker = new OptionPicker(self, state = {
      |     options: null,
      |     with: []
      | });
    h2#parameters
      a(href='#parameters') #
      = ' Parameters'
    h3: code self
    p The #[code &lt;input&gt;] or #[code &lt;select&gt;] element.
    h3: code state
    p The configuration data.
    h3: code state.options
    p TODO
    h3: code state.with
    p List of callable functions or objects containing an #[code attach()] method to be invoked each time the application is initialized. A very simple “plugin” system.
    h2#methods
      a(href='#methods') #
      = ' Methods'
    h3 Instance Methods
    h4: code picker.attach(self, state)
    p Re-initializes the application and its extensions after it has been detached.
    pre: code
      | picker.attach();
    h4: code picker.blur()
    p Blurs from the tag picker’s input.
    pre: code
      | picker.blur();
    h4: code picker.detach()
    p Disables the application methods (except for the #[code attach()] method) and executes the #[code detach()] method of the extensions, if they are present.
    pre: code
      | picker.detach();
    h4: code picker.fire(name, data)
    p Fires an event.
    pre: code
      | picker.fire('change', []);
    h4: code picker.focus(mode = true)
    p Focuses to the tag picker’s input. If it has a text, it will select the text as well.
    pre: code
      | picker.focus(); // Focus and select the text
      | picker.focus(-1); // Focus and put the caret to the start of the text
      | picker.focus(+1); // Focus and put the caret to the end of the text
    h4: code picker.get(name)
    p Returns the tag position in the list, starting from #[code 0].
    pre: code
      | if (null !== picker.get('foo')) { … }
    h4: code picker.let(name)
    p Removes a tag by its name.
    pre: code
      | picker.let('foo'); // Remove “foo” tag
      | picker.let(); // Reset to the initial value
    h4: code picker.off(name, event)
    p Removes an event.
    pre: code
      | picker.off('change'); // Remove all events from the `change` event container
      | picker.off('change', onChange); // Remove `onChange` event from the `change` event container
    h4: code picker.on(name, event)
    p Adds a new event.
    pre: code
      | picker.on('change', function () {
      |     console.log(this.value.split(this.state.join));
      | });
    pre: code
      | function onChange() {
      |     console.log(this.value.split(this.state.join));
      | }
      |
      | picker.on('change', onChange);
    h4: code picker.set(name, at = -1)
    p Adds a new tag with the given name.
    pre: code
      | picker.set('foo'); // Append “foo” tag
      | picker.set('bar', 0); // Prepend “bar” tag
      | picker.set('baz', 2); // Insert “baz” tag at index 2 in the list
    h3 Static Methods
    p(role='status') This application does not have any static methods.
    h2#properties
     a(href='#properties') #
     = ' Properties'
    h3 Instance Properties
    h4: code picker.hooks
    p Returns the events data.
    pre: code
      | console.log(picker.hooks);
    h4: code picker.mask
    p Returns the tag picker’s mask.
    pre: code
      | picker.mask.classList.add(picker.state.n + '--dark');
    h4: code picker.self
    p Returns the input element.
    pre: code
      | console.log(picker.self.getAttribute('name'));
    h4: code picker.state
    p Returns the application states if any.
    pre: code
      | console.log(picker.state);
    h4: code picker.text
    p Gets or sets the current text in the tag picker’s input.
    pre: code
      | console.log(picker.text);
    pre: code
      | picker.text = 'foo, bar, baz';
    h4: code picker.value
    p Proxy that passes to the #[code picker.self.value] property, with additional actions that are executed while the value is being set.
    pre: code
      | console.log(picker.value);
    pre: code
      | picker.on('change', function () {
      |     console.log(this.value);
      | });
      |
      | picker.value = 'foo, bar, baz';
    h3 Static Properties
    h4: code TagPicker.state
    p Returns the default values of #[code picker.state].
    pre: code
      | const picker = new TagPicker(document.querySelector('input'), {
      |     foo: ['bar', 'baz', 'qux']
      | });
      |
      | console.log([TagPicker.state, picker.state]);
    h4: code TagPicker.version
    p Returns the application version.
    h2#extensions
      a(href='#extensions') #
      = ' Extensions'
    h3 Anatomy of an Extension
    p Extension as a function:
    pre: code
      | function Extension(self, state = {}) {
      |     this.a = 1;
      |     this.b = function () {};
      |     return this;
      | }
      |
      | Object.defineProperty(Extension, 'name', {
      |     value: 'Extension'
      | });
    p Extension as an object:
    pre: code
      | const Extension = {
      |     attach: function (self, state = {}) {},
      |     detach: function (self, state = {}) {},
      |     name: 'Extension'
      | };
    h3 Usage of an Extension
    p As a core extension:
    pre: code
      | TagPicker.state.with.push(Extension);
    p As an optional extension:
    pre: code
      | const picker = new TagPicker(document.querySelector('input'), {
      |     with: [Extension]
      | });
    h3 List of Extensions
    ul
      li: a(aria-disabled='true') Clear Feature
      li: a(aria-disabled='true') History Feature
      li: a(aria-disabled='true') Options Feature
      li: a(aria-disabled='true') Sortable Feature
    h2#license
      a(href='#license') #
      = ' License'
    p Use it for free, pay if you get paid. So, you’ve just benefited financially after using this project? It’s a good idea to #[a(href='https://paypal.me/tatautaufik' target='_blank') share a little financial support] with this open source project too. Your support will motivate me to do any further development, as well as to provide voluntary support to overcome problems related to this project.
    p Thank you! ❤️
  footer
    hr
    p
      != '© ' + year + ' '
      a(href='/') Taufik Nurrohman