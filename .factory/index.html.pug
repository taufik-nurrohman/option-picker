extends _index.pug

block state
  - const scripts = ['index.min.js']
  - const styles = ['../layout/index.min.css', 'index.min.css']
  - const theme = '#000'
  - const title = 'Option Picker ' + version

block script
  script
    | const picker = new OptionPicker(document.forms[0].country);
    | picker.on('change', function (value) {
    |     console.log(value);
    | });

block style
  style
    | body {
    |   margin-left: auto;
    |   margin-right: auto;
    |   max-width: 60rem;
    | }
    | .option-picker {
    |   border-width: 2px;
    |   flex: 1;
    | }
    | .option-picker__arrow,
    | .option-picker__text,
    | .option-picker__value {
    |   border-width: 0;
    |   padding: 0 0.5em;
    | }
    | .option-picker--focus {
    |   border-color: #00f;
    | }
    | .option-picker--focus .option-picker__options {
    |   border-color: #00f;
    | }
    | .option-picker--focus .option-picker__value {
    |   background: 0 0;
    |   outline: 0;
    | }
    | .option-picker__option {
    |   border: 0;
    |   padding: 0 0.5em;
    | }
    | .option-picker__option:focus,
    | .option-picker__option:hover {
    |   background: #00f;
    |   color: #fff;
    |   outline: 0;
    | }
    | .option-picker__option-group {
    |   border: 0;
    |   gap: 0;
    |   padding: 0;
    | }
    | .option-picker__option-group::before {
    |   border: 0;
    |   padding: 0 0.5em;
    | }
    | .option-picker__option-group .option-picker__option {
    |   padding-left: 1em;
    | }
    | .option-picker__option--selected {
    |   background: #000;
    |   color: #fff;
    |   outline: 0;
    | }
    | .option-picker__options {
    |   background: #fff;
    |   gap: 0;
    |   left: -2px;
    |   min-width: calc(100% + 4px);
    |   padding: 0;
    | }
    | .option-picker__values {
    |   padding: 0;
    | }

block content
  p(role='alert') Do you like this project? Please support my #[a(href='https://github.com/mecha-cms') Mecha CMS] project too. Thank you!
  header
    hgroup
      h1= title
      p Accessible custom #[code &lt;select&gt;] (and #[code &lt;input list&gt;]) element.
    p Press the #[kbd Enter] or #[kbd Space] key to open/close the options list. Use the #[kbd ArrowDown] and #[kbd ArrowUp] keys to focus on an option, then press #[kbd Enter], #[kbd Space], or #[kbd Tab] to select it.
  main
    form(method='get' target='_blank')
      p(role='group')
        select(name='country')
          optgroup(label='A')
            option(value='AF') Afghanistan
            option(value='AX') Åland Islands
            option(value='AL') Albania
            option(value='DZ') Algeria
            option(value='AS') American Samoa
            option(value='AD') Andorra
            option(value='AO') Angola
            option(value='AI') Anguilla
            option(value='AQ') Antarctica
            option(value='AG') Antigua and Barbuda
            option(value='AR') Argentina
            option(value='AM') Armenia
            option(value='AW') Aruba
            option(value='AU') Australia
            option(value='AT') Austria
            option(value='AZ') Azerbaijan
          optgroup(label='B')
            option(value='BS') Bahamas
            option(value='BH') Bahrain
            option(value='BD') Bangladesh
            option(value='BB') Barbados
            option(value='BY') Belarus
            option(value='BE') Belgium
            option(value='BZ') Belize
            option(value='BJ') Benin
            option(value='BM') Bermuda
            option(value='BT') Bhutan
            option(value='BO') Bolivia, Plurinational State of bolivia
            option(value='BA') Bosnia and Herzegovina
            option(value='BW') Botswana
            option(value='BV') uvet Island
            option(value='BR') Brazil
            option(value='IO') British Indian Ocean Territory
            option(value='BN') Brunei Darussalam
            option(value='BG') Bulgaria
            option(value='BF') Burkina Faso
            option(disabled) Burma
            option(value='BI') Burundi
          optgroup(label='C')
            option(value='KH') Cambodia
            option(value='CM') Cameroon
            option(value='CA') Canada
            option(value='CV') Cape Verde
            option(value='KY') Cayman Islands
            option(value='CF') Central African Republic
            option(value='TD') Chad
            option(value='CL') Chile
            option(value='CN') China
            option(value='CX') Christmas Island
            option(value='CC') Cocos (Keeling) Islands
            option(value='CO') Colombia
            option(value='KM') Comoros
            option(value='CG') Congo
            option(value='CD') Congo, The Democratic Republic of the Congo
            option(value='CK') Cook Islands
            option(value='CR') Costa Rica
            option(value='CI') Cote d'Ivoire
            option(value='HR') Croatia
            option(value='CU') Cuba
            option(value='CY') Cyprus
            option(value='CZ') Czech Republic
          optgroup(label='D')
            option(value='DK') Denmark
            option(value='DJ') Djibouti
            option(value='DM') Dominica
            option(value='DO') Dominican Republic
          optgroup(label='E')
            option(value='EC') Ecuador
            option(value='EG') Egypt
            option(value='SV') El Salvador
            option(value='GQ') Equatorial Guinea
            option(value='ER') Eritrea
            option(value='EE') Estonia
            option(value='ET') Ethiopia
          optgroup(label='F')
            option(value='FK') Falkland Islands (Malvinas)
            option(value='FO') Faroe Islands
            option(value='FJ') Fiji
            option(value='FI') Finland
            option(value='FR') France
            option(value='GF') French Guiana
            option(value='PF') French Polynesia
            option(value='TF') French Southern Territories
          optgroup(label='G')
            option(value='GA') Gabon
            option(value='GM') Gambia
            option(value='GE') Georgia
            option(value='DE') Germany
            option(value='GH') Ghana
            option(value='GI') Gibraltar
            option(value='GR') Greece
            option(value='GL') Greenland
            option(value='GD') Grenada
            option(value='GP') Guadeloupe
            option(value='GU') Guam
            option(value='GT') Guatemala
            option(value='GG') Guernsey
            option(value='GN') Guinea
            option(value='GW') Guinea-Bissau
            option(value='GY') Guyana
          optgroup(label='H')
            option(value='HT') Haiti
            option(value='HM') Heard Island and Mcdonald Islands
            option(value='VA') Holy See (Vatican City State)
            option(value='HN') Honduras
            option(value='HK') Hong Kong
            option(value='HU') Hungary
          optgroup(label='I')
            option(value='IS') Iceland
            option(value='IN') India
            option(value='ID') Indonesia
            option(value='IR') Iran, Islamic Republic of Persian Gulf
            option(value='IQ') Iraq
            option(value='IE') Ireland
            option(value='IM') Isle of Man
            option(value='IL') Israel
            option(value='IT') Italy
          optgroup(label='J')
            option(value='JM') Jamaica
            option(value='JP') Japan
            option(value='JE') Jersey
            option(value='JO') Jordan
          optgroup(label='K')
            option(value='KZ') Kazakhstan
            option(value='KE') Kenya
            option(value='KI') Kiribati
            option(value='KP') Korea, Democratic People's Republic of Korea
            option(value='KR') Korea, Republic of South Korea
            option(value='XK') Kosovo
            option(value='KW') Kuwait
            option(value='KG') Kyrgyzstan
          optgroup(label='L')
            option(value='LA') Laos
            option(value='LV') Latvia
            option(value='LB') Lebanon
            option(value='LS') Lesotho
            option(value='LR') Liberia
            option(value='LY') Libyan Arab Jamahiriya
            option(value='LI') Liechtenstein
            option(value='LT') Lithuania
            option(value='LU') Luxembourg
          optgroup(label='M')
            option(value='MO') Macao
            option(value='MK') Macedonia
            option(value='MG') Madagascar
            option(value='MW') Malawi
            option(value='MY') Malaysia
            option(value='MV') Maldives
            option(value='ML') Mali
            option(value='MT') Malta
            option(value='MH') Marshall Islands
            option(value='MQ') Martinique
            option(value='MR') Mauritania
            option(value='MU') Mauritius
            option(value='YT') Mayotte
            option(value='MX') Mexico
            option(value='FM') Micronesia, Federated States of Micronesia
            option(value='MD') Moldova
            option(value='MC') Monaco
            option(value='MN') Mongolia
            option(value='ME') Montenegro
            option(value='MS') Montserrat
            option(value='MA') Morocco
            option(value='MZ') Mozambique
            option(value='MM') Myanmar
          optgroup(label='N')
            option(value='NA') Namibia
            option(value='NR') Nauru
            option(value='NP') Nepal
            option(value='NL') Netherlands
            option(value='AN') Netherlands Antilles
            option(value='NC') New Caledonia
            option(value='NZ') New Zealand
            option(value='NI') Nicaragua
            option(value='NE') Niger
            option(value='NG') Nigeria
            option(value='NU') Niue
            option(value='NF') Norfolk Island
            option(value='MP') Northern Mariana Islands
            option(value='NO') Norway
          optgroup(label='O')
            option(value='OM') Oman
          optgroup(label='P')
            option(value='PK') Pakistan
            option(value='PW') Palau
            option(value='PS') Palestinian Territory, Occupied
            option(value='PA') Panama
            option(value='PG') Papua New Guinea
            option(value='PY') Paraguay
            option(value='PE') Peru
            option(value='PH') Philippines
            option(value='PN') Pitcairn
            option(value='PL') Poland
            option(value='PT') Portugal
            option(value='PR') Puerto Rico
          optgroup(label='Q')
            option(value='QA') Qatar
          optgroup(label='R')
            option(value='RO') Romania
            option(value='RU') Russia
            option(value='RW') Rwanda
            option(value='RE') Reunion
          optgroup(label='S')
            option(value='BL') Saint Barthelemy
            option(value='SH') Saint Helena, Ascension and Tristan Da Cunha
            option(value='KN') Saint Kitts and Nevis
            option(value='LC') Saint Lucia
            option(value='MF') Saint Martin
            option(value='PM') Saint Pierre and Miquelon
            option(value='VC') Saint Vincent and the Grenadines
            option(value='WS') Samoa
            option(value='SM') San Marino
            option(value='ST') Sao Tome and Principe
            option(value='SA') Saudi Arabia
            option(value='SN') Senegal
            option(value='RS') Serbia
            option(value='SC') Seychelles
            option(value='SL') Sierra Leone
            option(value='SG') Singapore
            option(value='SK') Slovakia
            option(value='SI') Slovenia
            option(value='SB') Solomon Islands
            option(value='SO') Somalia
            option(value='ZA') South Africa
            option(value='SS') South Sudan
            option(value='GS') South Georgia and the South Sandwich Islands
            option(value='ES') Spain
            option(value='LK') Sri Lanka
            option(value='SD') Sudan
            option(value='SR') Suriname
            option(value='SJ') Svalbard and Jan Mayen
            option(value='SZ') Swaziland
            option(value='SE') Sweden
            option(value='CH') Switzerland
            option(value='SY') Syrian Arab Republic
          optgroup(label='T')
            option(value='TW') Taiwan
            option(value='TJ') Tajikistan
            option(value='TZ') Tanzania, United Republic of Tanzania
            option(value='TH') Thailand
            option(value='TL') Timor-Leste
            option(value='TG') Togo
            option(value='TK') Tokelau
            option(value='TO') Tonga
            option(value='TT') Trinidad and Tobago
            option(value='TN') Tunisia
            option(value='TR') Turkey
            option(value='TM') Turkmenistan
            option(value='TC') Turks and Caicos Islands
            option(value='TV') Tuvalu
          optgroup(label='U')
            option(value='UG') Uganda
            option(value='UA') Ukraine
            option(value='AE') United Arab Emirates
            option(value='GB') United Kingdom
            option(value='US') United States
            option(value='UY') Uruguay
            option(value='UZ') Uzbekistan
          optgroup(label='V')
            option(value='VU') Vanuatu
            option(value='VE') Venezuela, Bolivarian Republic of Venezuela
            option(value='VN') Vietnam
            option(value='VG') Virgin Islands, British
            option(value='VI') Virgin Islands, U.S.
          optgroup(label='W')
            option(value='WF') Wallis and Futuna
          optgroup(label='X')
          optgroup(label='Y')
            option(value='YE') Yemen
            option(disabled) Yugoslavia
          optgroup(label='Z')
            option(value='ZM') Zambia
            option(value='ZW') Zimbabwe
        = ' '
        button(type='submit') Submit
        = ' '
        button(type='reset') Reset
    h2#usage
      a(href='#usage') #
      = ' Usage'
    div(role='note')
      p #[strong Note:] CSS variables have been removed since version 2.0.0. From now on, I will only provide a minimal style just to make viable interaction. Expect it to look ugly by default. The main goal of this application is to be able to integrate it seamlessly into your web design. By providing a minimal style, it is easy to add other styles to it to adapt it to your own web design. Have a look at the source code on this page to see how I adapted the style to resemble the default style of the previous version.
    h3 Browser
    pre: code
      | &lt;!DOCTYPE html&gt;
      | &lt;html dir="ltr"&gt;
      |   &lt;head&gt;
      |     &lt;meta charset="utf-8"&gt;
      |     &lt;link href="#[a(href='index.min.css' target='_blank') ./index.min.css]" rel="stylesheet"&gt;
      |     &lt;style&gt;
      |       .option-picker {
      |         width: 100%;
      |       }
      |       .option-picker__options {
      |         background: #fff;
      |       }
      |     &lt;/style&gt;
      |   &lt;/head&gt;
      |   &lt;body&gt;
      |     &lt;p&gt;
      |       &lt;select&gt;
      |         &lt;option&gt;
      |           Option 1
      |         &lt;/option&gt;
      |         &lt;option&gt;
      |           Option 2
      |         &lt;/option&gt;
      |         &lt;option value="3"&gt;
      |           Option 3
      |         &lt;/option&gt;
      |       &lt;/select&gt;
      |     &lt;/p&gt;
      |     &lt;script src="#[a(href='index.min.js' target='_blank') ./index.min.js]"&gt;&lt;/script&gt;
      |     &lt;script&gt;
      |       const picker = new OptionPicker(document.querySelector('select'));
      |     &lt;/script&gt;
      |   &lt;/body&gt;
      | &lt;/html&gt;
    h3 Node.js
    p Functions and methods in this application are mostly native JavaScript and are intended for use by the browser. Node.js doesn’t know about the DOM, so this kind of practice will probably be used more often to build new browser packages than to be used directly in the Node.js server.
    h4 CommonJS
    pre: code
      | const OptionPicker = require('@taufik-nurrohman/option-picker').default;
      |
      | const picker = new OptionPicker(document.querySelector('select'));
    h4 ECMAScript
    pre: code
      | import OptionPicker from '@taufik-nurrohman/option-picker';
      |
      | const picker = new OptionPicker(document.querySelector('select'));
    h2#tests
      a(href='#tests') #
      = ' Tests'
    ul
      li: a(href='test.html' target='_blank') No Idea?
    h2#tweaks
      a(href='#tweaks') #
      = ' Tweaks'
    ul
      li: a(href='tweak/bootstrap5.html' target='_blank') Bootstrap v5.3 Style
    h2#constructor
      a(href='#constructor') #
      = ' Constructor'
    pre: code
      | const picker = new OptionPicker(self, state = {
      |     options: null,
      |     with: []
      | });
    h2#parameters
      a(href='#parameters') #
      = ' Parameters'
    h3: code self
    p The #[code &lt;input&gt;] or #[code &lt;select&gt;] element.
    h3: code state
    p The configuration data.
    h3: code state.options
    p TODO
    h3: code state.with
    p List of callable functions or objects containing an #[code attach()] method to be invoked each time the application is initialized. A very simple “plugin” system.
    h2#methods
      a(href='#methods') #
      = ' Methods'
    h3 Instance Methods
    h4: code picker.attach(self, state)
    p Re-initializes the application and its extensions after it has been detached.
    pre: code
      | picker.attach();
    h4: code picker.blur()
    p Blurs from the tag picker’s input.
    pre: code
      | picker.blur();
    h4: code picker.detach()
    p Disables the application methods (except for the #[code attach()] method) and executes the #[code detach()] method of the extensions, if they are present.
    pre: code
      | picker.detach();
    h4: code picker.fire(name, data)
    p Fires an event.
    pre: code
      | picker.fire('change', []);
    h4: code picker.focus(mode = true)
    p Focuses to the tag picker’s input. If it has a text, it will select the text as well.
    pre: code
      | picker.focus(); // Focus and select the text
      | picker.focus(-1); // Focus and put the caret to the start of the text
      | picker.focus(+1); // Focus and put the caret to the end of the text
    h4: code picker.get(name)
    p Returns the tag position in the list, starting from #[code 0].
    pre: code
      | if (null !== picker.get('foo')) { … }
    h4: code picker.let(name)
    p Removes a tag by its name.
    pre: code
      | picker.let('foo'); // Remove “foo” tag
      | picker.let(); // Reset to the initial value
    h4: code picker.off(name, event)
    p Removes an event.
    pre: code
      | picker.off('change'); // Remove all events from the `change` event container
      | picker.off('change', onChange); // Remove `onChange` event from the `change` event container
    h4: code picker.on(name, event)
    p Adds a new event.
    pre: code
      | picker.on('change', function () {
      |     console.log(this.value.split(this.state.join));
      | });
    pre: code
      | function onChange() {
      |     console.log(this.value.split(this.state.join));
      | }
      |
      | picker.on('change', onChange);
    h4: code picker.set(name, at = -1)
    p Adds a new tag with the given name.
    pre: code
      | picker.set('foo'); // Append “foo” tag
      | picker.set('bar', 0); // Prepend “bar” tag
      | picker.set('baz', 2); // Insert “baz” tag at index 2 in the list
    h3 Static Methods
    p(role='status') This application does not have any static methods.
    h2#properties
     a(href='#properties') #
     = ' Properties'
    h3 Instance Properties
    h4: code picker.hooks
    p Returns the events data.
    pre: code
      | console.log(picker.hooks);
    h4: code picker.mask
    p Returns the tag picker’s mask.
    pre: code
      | picker.mask.classList.add(picker.state.n + '--dark');
    h4: code picker.self
    p Returns the input element.
    pre: code
      | console.log(picker.self.getAttribute('name'));
    h4: code picker.state
    p Returns the application states if any.
    pre: code
      | console.log(picker.state);
    h4: code picker.text
    p Gets or sets the current text in the tag picker’s input.
    pre: code
      | console.log(picker.text);
    pre: code
      | picker.text = 'foo, bar, baz';
    h4: code picker.value
    p Proxy that passes to the #[code picker.self.value] property, with additional actions that are executed while the value is being set.
    pre: code
      | console.log(picker.value);
    pre: code
      | picker.on('change', function () {
      |     console.log(this.value);
      | });
      |
      | picker.value = 'foo, bar, baz';
    h3 Static Properties
    h4: code TagPicker.state
    p Returns the default values of #[code picker.state].
    pre: code
      | const picker = new TagPicker(document.querySelector('input'), {
      |     foo: ['bar', 'baz', 'qux']
      | });
      |
      | console.log([TagPicker.state, picker.state]);
    h4: code TagPicker.version
    p Returns the application version.
    h2#extensions
      a(href='#extensions') #
      = ' Extensions'
    h3 Anatomy of an Extension
    p Extension as a function:
    pre: code
      | function Extension(self, state = {}) {
      |     this.a = 1;
      |     this.b = function () {};
      |     return this;
      | }
      |
      | Object.defineProperty(Extension, 'name', {
      |     value: 'Extension'
      | });
    p Extension as an object:
    pre: code
      | const Extension = {
      |     attach: function (self, state = {}) {},
      |     detach: function (self, state = {}) {},
      |     name: 'Extension'
      | };
    h3 Usage of an Extension
    p As a core extension:
    pre: code
      | TagPicker.state.with.push(Extension);
    p As an optional extension:
    pre: code
      | const picker = new TagPicker(document.querySelector('input'), {
      |     with: [Extension]
      | });
    h3 List of Extensions
    ul
      li: a(aria-disabled='true') Clear Feature
      li: a(aria-disabled='true') History Feature
      li: a(aria-disabled='true') Options Feature
      li: a(aria-disabled='true') Sortable Feature
    h2#license
      a(href='#license') #
      = ' License'
    p Use it for free, pay if you get paid. So, you’ve just benefited financially after using this project? It’s a good idea to #[a(href='https://paypal.me/tatautaufik' target='_blank') share a little financial support] with this open source project too. Your support will motivate me to do any further development, as well as to provide voluntary support to overcome problems related to this project.
    p Thank you! ❤️
  footer
    hr
    p
      != '© ' + year + ' '
      a(href='/') Taufik Nurrohman