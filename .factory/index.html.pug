extends _index.pug

block state
  - const scripts = ['index.js']
  - const styles = ['../layout/index.min.css', 'index.min.css']
  - const theme = '#000'
  - const title = 'Option Picker ' + version

block script
  script
    | const picker = new OptionPicker(document.forms[0].country);
    | picker.on('change', function (e, value) {
    |     console.log(value);
    | });

block style
  style
    | body {
    |   margin-left: auto;
    |   margin-right: auto;
    |   max-width: 60rem;
    | }
    | .option-picker {
    |   border-width: 2px;
    |   flex: 1;
    | }
    | .option-picker__arrow,
    | .option-picker__text,
    | .option-picker__value {
    |   border-width: 0;
    |   padding: 0 0.5em;
    | }
    | .option-picker:focus,
    | .option-picker:focus-within {
    |   border-color: #00f;
    | }
    | .option-picker:focus .option-picker__options,
    | .option-picker:focus-within .option-picker__options {
    |   border-color: #00f;
    | }
    | .option-picker:focus .option-picker__value,
    | .option-picker:focus-within .option-picker__value {
    |   background: 0 0;
    |   outline: 0;
    | }
    | .option-picker__option {
    |   border: 0;
    |   padding: 0 0.5em;
    | }
    | .option-picker__option:focus,
    | .option-picker__option:hover {
    |   outline: 0;
    | }
    | .option-picker__option[aria-selected='true'] {
    |   background: #000;
    |   color: #fff;
    |   outline: 0;
    | }
    | .option-picker__option:where(:not([aria-disabled='true'])):hover {
    |   background: #00f;
    |   color: #fff;
    | }
    | .option-picker__options {
    |   background: #fff;
    |   box-shadow: 0 1px 5px rgba(0, 0, 0, 0.5);
    |   gap: 0;
    |   left: -2px;
    |   min-width: calc(100% + 4px);
    |   padding: 0;
    | }
    | .option-picker__options:not(:hover) .option-picker__option:where(:not([aria-disabled='true'])):focus {
    |   background: #00f;
    |   color: #fff;
    | }
    | .option-picker__options:hover .option-picker__option:where(:not([aria-disabled='true']):not([aria-selected='true']):not(:hover)):focus {
    |   background: #eee;
    | }
    | .option-picker__options-batch {
    |   border: 0;
    |   gap: 0;
    |   padding: 0;
    | }
    | .option-picker__options-batch:not(:first-child) {
    |   border-top: 1px solid;
    |   border-top-color: inherit;
    | }
    | .option-picker__options-batch::before {
    |   background: #eef;
    |   border: 0;
    |   padding: 0 0.5em;
    | }
    | .option-picker__options-batch .option-picker__option {
    |   padding-left: 1em;
    | }
    | .option-picker__values {
    |   padding: 0;
    | }
    | .option-picker[data-size] .option-picker__options {
    |   box-shadow: none;
    | }
    | .option-picker[data-size] .option-picker__values {
    |   border-bottom: 2px solid;
    |   border-color: inherit;
    | }
    |
    | .option-picker__option[data-value]::before,
    | .option-picker__value[data-value]::before {
    |   content: '🏴‍☠️';
    |   margin-right: 0.5em;
    | }
    | .option-picker__option[data-value='AF']::before,
    | .option-picker__value[data-value='AF']::before {
    |   content: '🇦🇫';
    | }
    | .option-picker__option[data-value='AX']::before,
    | .option-picker__value[data-value='AX']::before {
    |   content: '🇦🇽';
    | }
    | .option-picker__option[data-value='AL']::before,
    | .option-picker__value[data-value='AL']::before {
    |   content: '🇦🇱';
    | }
    | .option-picker__option[data-value='DZ']::before,
    | .option-picker__value[data-value='DZ']::before {
    |   content: '🇩🇿';
    | }
    | .option-picker__option[data-value='AS']::before,
    | .option-picker__value[data-value='AS']::before {
    |   content: '🇦🇸';
    | }
    | .option-picker__option[data-value='AD']::before,
    | .option-picker__value[data-value='AD']::before {
    |   content: '🇦🇩';
    | }
    | .option-picker__option[data-value='AO']::before,
    | .option-picker__value[data-value='AO']::before {
    |   content: '🇦🇴';
    | }
    | .option-picker__option[data-value='AI']::before,
    | .option-picker__value[data-value='AI']::before {
    |   content: '🇦🇮';
    | }
    | .option-picker__option[data-value='AQ']::before,
    | .option-picker__value[data-value='AQ']::before {
    |   content: '🇦🇶';
    | }
    | .option-picker__option[data-value='AG']::before,
    | .option-picker__value[data-value='AG']::before {
    |   content: '🇦🇬';
    | }
    | .option-picker__option[data-value='AR']::before,
    | .option-picker__value[data-value='AR']::before {
    |   content: '🇦🇷';
    | }
    | .option-picker__option[data-value='AM']::before,
    | .option-picker__value[data-value='AM']::before {
    |   content: '🇦🇲';
    | }
    | .option-picker__option[data-value='AW']::before,
    | .option-picker__value[data-value='AW']::before {
    |   content: '🇦🇼';
    | }
    | .option-picker__option[data-value='AU']::before,
    | .option-picker__value[data-value='AU']::before {
    |   content: '🇦🇺';
    | }
    | .option-picker__option[data-value='AT']::before,
    | .option-picker__value[data-value='AT']::before {
    |   content: '🇦🇹';
    | }
    | .option-picker__option[data-value='AZ']::before,
    | .option-picker__value[data-value='AZ']::before {
    |   content: '🇦🇿';
    | }
    | .option-picker__option[data-value='BS']::before,
    | .option-picker__value[data-value='BS']::before {
    |   content: '🇧🇸';
    | }
    | .option-picker__option[data-value='BH']::before,
    | .option-picker__value[data-value='BH']::before {
    |   content: '🇧🇭';
    | }
    | .option-picker__option[data-value='BD']::before,
    | .option-picker__value[data-value='BD']::before {
    |   content: '🇧🇩';
    | }
    | .option-picker__option[data-value='BB']::before,
    | .option-picker__value[data-value='BB']::before {
    |   content: '🇧🇧';
    | }
    | .option-picker__option[data-value='BY']::before,
    | .option-picker__value[data-value='BY']::before {
    |   content: '🇧🇾';
    | }
    | .option-picker__option[data-value='BE']::before,
    | .option-picker__value[data-value='BE']::before {
    |   content: '🇧🇪';
    | }
    | .option-picker__option[data-value='BZ']::before,
    | .option-picker__value[data-value='BZ']::before {
    |   content: '🇧🇿';
    | }
    | .option-picker__option[data-value='BJ']::before,
    | .option-picker__value[data-value='BJ']::before {
    |   content: '🇧🇯';
    | }
    | .option-picker__option[data-value='BM']::before,
    | .option-picker__value[data-value='BM']::before {
    |   content: '🇧🇲';
    | }
    | .option-picker__option[data-value='BT']::before,
    | .option-picker__value[data-value='BT']::before {
    |   content: '🇧🇹';
    | }
    | .option-picker__option[data-value='BO']::before,
    | .option-picker__value[data-value='BO']::before {
    |   content: '🇧🇴';
    | }
    | .option-picker__option[data-value='BA']::before,
    | .option-picker__value[data-value='BA']::before {
    |   content: '🇧🇦';
    | }
    | .option-picker__option[data-value='BW']::before,
    | .option-picker__value[data-value='BW']::before {
    |   content: '🇧🇼';
    | }
    | .option-picker__option[data-value='BV']::before,
    | .option-picker__value[data-value='BV']::before {
    |   content: '🏳';
    | }
    | .option-picker__option[data-value='BR']::before,
    | .option-picker__value[data-value='BR']::before {
    |   content: '🇧🇷';
    | }
    | .option-picker__option[data-value='IO']::before,
    | .option-picker__value[data-value='IO']::before {
    |   content: '🇮🇴';
    | }
    | .option-picker__option[data-value='BN']::before,
    | .option-picker__value[data-value='BN']::before {
    |   content: '🇧🇳';
    | }
    | .option-picker__option[data-value='BG']::before,
    | .option-picker__value[data-value='BG']::before {
    |   content: '🇧🇬';
    | }
    | .option-picker__option[data-value='BF']::before,
    | .option-picker__value[data-value='BF']::before {
    |   content: '🇧🇫';
    | }
    | .option-picker__option[data-value='BI']::before,
    | .option-picker__value[data-value='BI']::before {
    |   content: '🇧🇮';
    | }
    | .option-picker__option[data-value='KH']::before,
    | .option-picker__value[data-value='KH']::before {
    |   content: '🇰🇭';
    | }
    | .option-picker__option[data-value='CM']::before,
    | .option-picker__value[data-value='CM']::before {
    |   content: '🇨🇲';
    | }
    | .option-picker__option[data-value='CA']::before,
    | .option-picker__value[data-value='CA']::before {
    |   content: '🇨🇦';
    | }
    | .option-picker__option[data-value='CV']::before,
    | .option-picker__value[data-value='CV']::before {
    |   content: '🇨🇻';
    | }
    | .option-picker__option[data-value='KY']::before,
    | .option-picker__value[data-value='KY']::before {
    |   content: '🇰🇾';
    | }
    | .option-picker__option[data-value='CF']::before,
    | .option-picker__value[data-value='CF']::before {
    |   content: '🇨🇫';
    | }
    | .option-picker__option[data-value='TD']::before,
    | .option-picker__value[data-value='TD']::before {
    |   content: '🇹🇩';
    | }
    | .option-picker__option[data-value='CL']::before,
    | .option-picker__value[data-value='CL']::before {
    |   content: '🇨🇱';
    | }
    | .option-picker__option[data-value='CN']::before,
    | .option-picker__value[data-value='CN']::before {
    |   content: '🇨🇳';
    | }
    | .option-picker__option[data-value='CX']::before,
    | .option-picker__value[data-value='CX']::before {
    |   content: '🇨🇽';
    | }
    | .option-picker__option[data-value='CC']::before,
    | .option-picker__value[data-value='CC']::before {
    |   content: '🇨🇨';
    | }
    | .option-picker__option[data-value='CO']::before,
    | .option-picker__value[data-value='CO']::before {
    |   content: '🇨🇴';
    | }
    | .option-picker__option[data-value='KM']::before,
    | .option-picker__value[data-value='KM']::before {
    |   content: '🇰🇲';
    | }
    | .option-picker__option[data-value='CG']::before,
    | .option-picker__value[data-value='CG']::before {
    |   content: '🇨🇬';
    | }
    | .option-picker__option[data-value='CD']::before,
    | .option-picker__value[data-value='CD']::before {
    |   content: '🇨🇩';
    | }
    | .option-picker__option[data-value='CK']::before,
    | .option-picker__value[data-value='CK']::before {
    |   content: '🇨🇰';
    | }
    | .option-picker__option[data-value='CR']::before,
    | .option-picker__value[data-value='CR']::before {
    |   content: '🇨🇷';
    | }
    | .option-picker__option[data-value='CI']::before,
    | .option-picker__value[data-value='CI']::before {
    |   content: '🇨🇮';
    | }
    | .option-picker__option[data-value='HR']::before,
    | .option-picker__value[data-value='HR']::before {
    |   content: '🇭🇷';
    | }
    | .option-picker__option[data-value='CU']::before,
    | .option-picker__value[data-value='CU']::before {
    |   content: '🇨🇺';
    | }
    | .option-picker__option[data-value='CY']::before,
    | .option-picker__value[data-value='CY']::before {
    |   content: '🇨🇾';
    | }
    | .option-picker__option[data-value='CZ']::before,
    | .option-picker__value[data-value='CZ']::before {
    |   content: '🇨🇿';
    | }
    | .option-picker__option[data-value='DK']::before,
    | .option-picker__value[data-value='DK']::before {
    |   content: '🇩🇰';
    | }
    | .option-picker__option[data-value='DJ']::before,
    | .option-picker__value[data-value='DJ']::before {
    |   content: '🇩🇯';
    | }
    | .option-picker__option[data-value='DM']::before,
    | .option-picker__value[data-value='DM']::before {
    |   content: '🇩🇲';
    | }
    | .option-picker__option[data-value='DO']::before,
    | .option-picker__value[data-value='DO']::before {
    |   content: '🇨🇩';
    | }
    | .option-picker__option[data-value='EC']::before,
    | .option-picker__value[data-value='EC']::before {
    |   content: '🇪🇨';
    | }
    | .option-picker__option[data-value='EG']::before,
    | .option-picker__value[data-value='EG']::before {
    |   content: '🇪🇬';
    | }
    | .option-picker__option[data-value='SV']::before,
    | .option-picker__value[data-value='SV']::before {
    |   content: '🇸🇻';
    | }
    | .option-picker__option[data-value='GQ']::before,
    | .option-picker__value[data-value='GQ']::before {
    |   content: '🇬🇶';
    | }
    | .option-picker__option[data-value='ER']::before,
    | .option-picker__value[data-value='ER']::before {
    |   content: '🇪🇷';
    | }
    | .option-picker__option[data-value='EE']::before,
    | .option-picker__value[data-value='EE']::before {
    |   content: '🇪🇪';
    | }
    | .option-picker__option[data-value='ET']::before,
    | .option-picker__value[data-value='ET']::before {
    |   content: '🇪🇹';
    | }
    | .option-picker__option[data-value='FK']::before,
    | .option-picker__value[data-value='FK']::before {
    |   content: '🇫🇰';
    | }
    | .option-picker__option[data-value='FO']::before,
    | .option-picker__value[data-value='FO']::before {
    |   content: '🇫🇴';
    | }
    | .option-picker__option[data-value='FJ']::before,
    | .option-picker__value[data-value='FJ']::before {
    |   content: '🇫🇯';
    | }
    | .option-picker__option[data-value='FI']::before,
    | .option-picker__value[data-value='FI']::before {
    |   content: '🇫🇮';
    | }
    | .option-picker__option[data-value='FR']::before,
    | .option-picker__value[data-value='FR']::before {
    |   content: '🇫🇷';
    | }
    | .option-picker__option[data-value='GF']::before,
    | .option-picker__value[data-value='GF']::before {
    |   content: '🇬🇫';
    | }
    | .option-picker__option[data-value='PF']::before,
    | .option-picker__value[data-value='PF']::before {
    |   content: '🇵🇫';
    | }
    | .option-picker__option[data-value='TF']::before,
    | .option-picker__value[data-value='TF']::before {
    |   content: '🇹🇫';
    | }
    | .option-picker__option[data-value='GA']::before,
    | .option-picker__value[data-value='GA']::before {
    |   content: '🇬🇦';
    | }
    | .option-picker__option[data-value='GM']::before,
    | .option-picker__value[data-value='GM']::before {
    |   content: '🇬🇲';
    | }
    | .option-picker__option[data-value='GE']::before,
    | .option-picker__value[data-value='GE']::before {
    |   content: '🇬🇪';
    | }
    | .option-picker__option[data-value='DE']::before,
    | .option-picker__value[data-value='DE']::before {
    |   content: '🇩🇪';
    | }
    | .option-picker__option[data-value='GH']::before,
    | .option-picker__value[data-value='GH']::before {
    |   content: '🇬🇭';
    | }
    | .option-picker__option[data-value='GI']::before,
    | .option-picker__value[data-value='GI']::before {
    |   content: '🇬🇮';
    | }
    | .option-picker__option[data-value='GR']::before,
    | .option-picker__value[data-value='GR']::before {
    |   content: '🇬🇷';
    | }
    | .option-picker__option[data-value='GL']::before,
    | .option-picker__value[data-value='GL']::before {
    |   content: '🇬🇱';
    | }
    | .option-picker__option[data-value='GD']::before,
    | .option-picker__value[data-value='GD']::before {
    |   content: '🇬🇩';
    | }
    | .option-picker__option[data-value='GP']::before,
    | .option-picker__value[data-value='GP']::before {
    |   content: '🇬🇵';
    | }
    | .option-picker__option[data-value='GU']::before,
    | .option-picker__value[data-value='GU']::before {
    |   content: '🇬🇺';
    | }
    | .option-picker__option[data-value='GT']::before,
    | .option-picker__value[data-value='GT']::before {
    |   content: '🇬🇹';
    | }
    | .option-picker__option[data-value='GG']::before,
    | .option-picker__value[data-value='GG']::before {
    |   content: '🇬🇬';
    | }
    | .option-picker__option[data-value='GN']::before,
    | .option-picker__value[data-value='GN']::before {
    |   content: '🇬🇳';
    | }
    | .option-picker__option[data-value='GW']::before,
    | .option-picker__value[data-value='GW']::before {
    |   content: '🇬🇼';
    | }
    | .option-picker__option[data-value='GY']::before,
    | .option-picker__value[data-value='GY']::before {
    |   content: '🇬🇾';
    | }
    | .option-picker__option[data-value='HT']::before,
    | .option-picker__value[data-value='HT']::before {
    |   content: '🇭🇹';
    | }
    | .option-picker__option[data-value='HM']::before,
    | .option-picker__value[data-value='HM']::before {
    |   content: '🏳';
    | }
    | .option-picker__option[data-value='VA']::before,
    | .option-picker__value[data-value='VA']::before {
    |   content: '🇻🇦';
    | }
    | .option-picker__option[data-value='HN']::before,
    | .option-picker__value[data-value='HN']::before {
    |   content: '🇭🇳';
    | }
    | .option-picker__option[data-value='HK']::before,
    | .option-picker__value[data-value='HK']::before {
    |   content: '🇭🇰';
    | }
    | .option-picker__option[data-value='HU']::before,
    | .option-picker__value[data-value='HU']::before {
    |   content: '🇭🇺';
    | }
    | .option-picker__option[data-value='IS']::before,
    | .option-picker__value[data-value='IS']::before {
    |   content: '🇮🇸';
    | }
    | .option-picker__option[data-value='IN']::before,
    | .option-picker__value[data-value='IN']::before {
    |   content: '🇮🇳';
    | }
    | .option-picker__option[data-value='ID']::before,
    | .option-picker__value[data-value='ID']::before {
    |   content: '🇮🇩';
    | }
    | .option-picker__option[data-value='IR']::before,
    | .option-picker__value[data-value='IR']::before {
    |   content: '🇮🇷';
    | }
    | .option-picker__option[data-value='IQ']::before,
    | .option-picker__value[data-value='IQ']::before {
    |   content: '🇮🇶';
    | }
    | .option-picker__option[data-value='IE']::before,
    | .option-picker__value[data-value='IE']::before {
    |   content: '🇮🇪';
    | }
    | .option-picker__option[data-value='IM']::before,
    | .option-picker__value[data-value='IM']::before {
    |   content: '🇮🇲';
    | }
    | .option-picker__option[data-value='IL']::before,
    | .option-picker__value[data-value='IL']::before {
    |   content: '🇮🇱';
    | }
    | .option-picker__option[data-value='IT']::before,
    | .option-picker__value[data-value='IT']::before {
    |   content: '🇮🇹';
    | }
    | .option-picker__option[data-value='JM']::before,
    | .option-picker__value[data-value='JM']::before {
    |   content: '🇯🇲';
    | }
    | .option-picker__option[data-value='JP']::before,
    | .option-picker__value[data-value='JP']::before {
    |   content: '🇯🇵';
    | }
    | .option-picker__option[data-value='JE']::before,
    | .option-picker__value[data-value='JE']::before {
    |   content: '🇯🇪';
    | }
    | .option-picker__option[data-value='JO']::before,
    | .option-picker__value[data-value='JO']::before {
    |   content: '🇯🇴';
    | }
    | .option-picker__option[data-value='KZ']::before,
    | .option-picker__value[data-value='KZ']::before {
    |   content: '🇰🇿';
    | }
    | .option-picker__option[data-value='KE']::before,
    | .option-picker__value[data-value='KE']::before {
    |   content: '🇰🇪';
    | }
    | .option-picker__option[data-value='KI']::before,
    | .option-picker__value[data-value='KI']::before {
    |   content: '🇰🇮';
    | }
    | .option-picker__option[data-value='KP']::before,
    | .option-picker__value[data-value='KP']::before {
    |   content: '🇰🇵';
    | }
    | .option-picker__option[data-value='KR']::before,
    | .option-picker__value[data-value='KR']::before {
    |   content: '🇰🇷';
    | }
    | .option-picker__option[data-value='XK']::before,
    | .option-picker__value[data-value='XK']::before {
    |   content: '🇽🇰';
    | }
    | .option-picker__option[data-value='KW']::before,
    | .option-picker__value[data-value='KW']::before {
    |   content: '🇰🇼';
    | }
    | .option-picker__option[data-value='KG']::before,
    | .option-picker__value[data-value='KG']::before {
    |   content: '🇰🇬';
    | }
    | .option-picker__option[data-value='LA']::before,
    | .option-picker__value[data-value='LA']::before {
    |   content: '🇱🇦';
    | }
    | .option-picker__option[data-value='LV']::before,
    | .option-picker__value[data-value='LV']::before {
    |   content: '🇱🇻';
    | }
    | .option-picker__option[data-value='LB']::before,
    | .option-picker__value[data-value='LB']::before {
    |   content: '🇱🇧';
    | }
    | .option-picker__option[data-value='LS']::before,
    | .option-picker__value[data-value='LS']::before {
    |   content: '🇱🇸';
    | }
    | .option-picker__option[data-value='LR']::before,
    | .option-picker__value[data-value='LR']::before {
    |   content: '🇱🇷';
    | }
    | .option-picker__option[data-value='LY']::before,
    | .option-picker__value[data-value='LY']::before {
    |   content: '🇱🇾';
    | }
    | .option-picker__option[data-value='LI']::before,
    | .option-picker__value[data-value='LI']::before {
    |   content: '🇱🇮';
    | }
    | .option-picker__option[data-value='LT']::before,
    | .option-picker__value[data-value='LT']::before {
    |   content: '🇱🇹';
    | }
    | .option-picker__option[data-value='LU']::before,
    | .option-picker__value[data-value='LU']::before {
    |   content: '🇱🇺';
    | }
    | .option-picker__option[data-value='MO']::before,
    | .option-picker__value[data-value='MO']::before {
    |   content: '🇲🇴';
    | }
    | .option-picker__option[data-value='MK']::before,
    | .option-picker__value[data-value='MK']::before {
    |   content: '🇲🇰';
    | }
    | .option-picker__option[data-value='MG']::before,
    | .option-picker__value[data-value='MG']::before {
    |   content: '🇲🇬';
    | }
    | .option-picker__option[data-value='MW']::before,
    | .option-picker__value[data-value='MW']::before {
    |   content: '🇲🇼';
    | }
    | .option-picker__option[data-value='MY']::before,
    | .option-picker__value[data-value='MY']::before {
    |   content: '🇲🇾';
    | }
    | .option-picker__option[data-value='MV']::before,
    | .option-picker__value[data-value='MV']::before {
    |   content: '🇲🇻';
    | }
    | .option-picker__option[data-value='ML']::before,
    | .option-picker__value[data-value='ML']::before {
    |   content: '🇲🇱';
    | }
    | .option-picker__option[data-value='MT']::before,
    | .option-picker__value[data-value='MT']::before {
    |   content: '🇲🇹';
    | }
    | .option-picker__option[data-value='MH']::before,
    | .option-picker__value[data-value='MH']::before {
    |   content: '🇲🇭';
    | }
    | .option-picker__option[data-value='MQ']::before,
    | .option-picker__value[data-value='MQ']::before {
    |   content: '🇲🇶';
    | }
    | .option-picker__option[data-value='MR']::before,
    | .option-picker__value[data-value='MR']::before {
    |   content: '🇲🇷';
    | }
    | .option-picker__option[data-value='MU']::before,
    | .option-picker__value[data-value='MU']::before {
    |   content: '🇲🇺';
    | }
    | .option-picker__option[data-value='YT']::before,
    | .option-picker__value[data-value='YT']::before {
    |   content: '🇾🇹';
    | }
    | .option-picker__option[data-value='MX']::before,
    | .option-picker__value[data-value='MX']::before {
    |   content: '🇲🇽';
    | }
    | .option-picker__option[data-value='FM']::before,
    | .option-picker__value[data-value='FM']::before {
    |   content: '🇫🇲';
    | }
    | .option-picker__option[data-value='MD']::before,
    | .option-picker__value[data-value='MD']::before {
    |   content: '🇲🇩';
    | }
    | .option-picker__option[data-value='MC']::before,
    | .option-picker__value[data-value='MC']::before {
    |   content: '🇲🇨';
    | }
    | .option-picker__option[data-value='MN']::before,
    | .option-picker__value[data-value='MN']::before {
    |   content: '🇲🇳';
    | }
    | .option-picker__option[data-value='ME']::before,
    | .option-picker__value[data-value='ME']::before {
    |   content: '🇲🇪';
    | }
    | .option-picker__option[data-value='MS']::before,
    | .option-picker__value[data-value='MS']::before {
    |   content: '🇲🇸';
    | }
    | .option-picker__option[data-value='MA']::before,
    | .option-picker__value[data-value='MA']::before {
    |   content: '🇲🇦';
    | }
    | .option-picker__option[data-value='MZ']::before,
    | .option-picker__value[data-value='MZ']::before {
    |   content: '🇲🇿';
    | }
    | .option-picker__option[data-value='MM']::before,
    | .option-picker__value[data-value='MM']::before {
    |   content: '🇲🇲';
    | }
    | .option-picker__option[data-value='NA']::before,
    | .option-picker__value[data-value='NA']::before {
    |   content: '🇳🇦';
    | }
    | .option-picker__option[data-value='NR']::before,
    | .option-picker__value[data-value='NR']::before {
    |   content: '🇳🇷';
    | }
    | .option-picker__option[data-value='NP']::before,
    | .option-picker__value[data-value='NP']::before {
    |   content: '🇳🇵';
    | }
    | .option-picker__option[data-value='NL']::before,
    | .option-picker__value[data-value='NL']::before {
    |   content: '🇳🇱';
    | }
    | .option-picker__option[data-value='AN']::before,
    | .option-picker__value[data-value='AN']::before {
    |   content: '🇳🇱';
    | }
    | .option-picker__option[data-value='NC']::before,
    | .option-picker__value[data-value='NC']::before {
    |   content: '🇳🇨';
    | }
    | .option-picker__option[data-value='NZ']::before,
    | .option-picker__value[data-value='NZ']::before {
    |   content: '🇳🇿';
    | }
    | .option-picker__option[data-value='NI']::before,
    | .option-picker__value[data-value='NI']::before {
    |   content: '🇳🇮';
    | }
    | .option-picker__option[data-value='NE']::before,
    | .option-picker__value[data-value='NE']::before {
    |   content: '🇳🇪';
    | }
    | .option-picker__option[data-value='NG']::before,
    | .option-picker__value[data-value='NG']::before {
    |   content: '🇳🇬';
    | }
    | .option-picker__option[data-value='NU']::before,
    | .option-picker__value[data-value='NU']::before {
    |   content: '🇳🇺';
    | }
    | .option-picker__option[data-value='NF']::before,
    | .option-picker__value[data-value='NF']::before {
    |   content: '🇳🇫';
    | }
    | .option-picker__option[data-value='MP']::before,
    | .option-picker__value[data-value='MP']::before {
    |   content: '🏳';
    | }
    | .option-picker__option[data-value='NO']::before,
    | .option-picker__value[data-value='NO']::before {
    |   content: '🇳🇴';
    | }
    | .option-picker__option[data-value='OM']::before,
    | .option-picker__value[data-value='OM']::before {
    |   content: '🇴🇲';
    | }
    | .option-picker__option[data-value='PK']::before,
    | .option-picker__value[data-value='PK']::before {
    |   content: '🇵🇰';
    | }
    | .option-picker__option[data-value='PW']::before,
    | .option-picker__value[data-value='PW']::before {
    |   content: '🇵🇼';
    | }
    | .option-picker__option[data-value='PS']::before,
    | .option-picker__value[data-value='PS']::before {
    |   content: '🇵🇸';
    | }
    | .option-picker__option[data-value='PA']::before,
    | .option-picker__value[data-value='PA']::before {
    |   content: '🇵🇦';
    | }
    | .option-picker__option[data-value='PG']::before,
    | .option-picker__value[data-value='PG']::before {
    |   content: '🇵🇬';
    | }
    | .option-picker__option[data-value='PY']::before,
    | .option-picker__value[data-value='PY']::before {
    |   content: '🇵🇾';
    | }
    | .option-picker__option[data-value='PE']::before,
    | .option-picker__value[data-value='PE']::before {
    |   content: '🇵🇪';
    | }
    | .option-picker__option[data-value='PH']::before,
    | .option-picker__value[data-value='PH']::before {
    |   content: '🇵🇭';
    | }
    | .option-picker__option[data-value='PN']::before,
    | .option-picker__value[data-value='PN']::before {
    |   content: '🇵🇳';
    | }
    | .option-picker__option[data-value='PL']::before,
    | .option-picker__value[data-value='PL']::before {
    |   content: '🇵🇱';
    | }
    | .option-picker__option[data-value='PT']::before,
    | .option-picker__value[data-value='PT']::before {
    |   content: '🇵🇹';
    | }
    | .option-picker__option[data-value='PR']::before,
    | .option-picker__value[data-value='PR']::before {
    |   content: '🇵🇷';
    | }
    | .option-picker__option[data-value='QA']::before,
    | .option-picker__value[data-value='QA']::before {
    |   content: '🇶🇦';
    | }
    | .option-picker__option[data-value='RO']::before,
    | .option-picker__value[data-value='RO']::before {
    |   content: '🇷🇴';
    | }
    | .option-picker__option[data-value='RU']::before,
    | .option-picker__value[data-value='RU']::before {
    |   content: '🇷🇺';
    | }
    | .option-picker__option[data-value='RW']::before,
    | .option-picker__value[data-value='RW']::before {
    |   content: '🇷🇼';
    | }
    | .option-picker__option[data-value='RE']::before,
    | .option-picker__value[data-value='RE']::before {
    |   content: '🇫🇷';
    | }
    | .option-picker__option[data-value='BL']::before,
    | .option-picker__value[data-value='BL']::before {
    |   content: '🇧🇱';
    | }
    | .option-picker__option[data-value='SH']::before,
    | .option-picker__value[data-value='SH']::before {
    |   content: '🇸🇭';
    | }
    | .option-picker__option[data-value='KN']::before,
    | .option-picker__value[data-value='KN']::before {
    |   content: '🇰🇳';
    | }
    | .option-picker__option[data-value='LC']::before,
    | .option-picker__value[data-value='LC']::before {
    |   content: '🇱🇨';
    | }
    | .option-picker__option[data-value='MF']::before,
    | .option-picker__value[data-value='MF']::before {
    |   content: '🏳';
    | }
    | .option-picker__option[data-value='PM']::before,
    | .option-picker__value[data-value='PM']::before {
    |   content: '🇵🇲';
    | }
    | .option-picker__option[data-value='VC']::before,
    | .option-picker__value[data-value='VC']::before {
    |   content: '🇻🇨';
    | }
    | .option-picker__option[data-value='WS']::before,
    | .option-picker__value[data-value='WS']::before {
    |   content: '🇼🇸';
    | }
    | .option-picker__option[data-value='SM']::before,
    | .option-picker__value[data-value='SM']::before {
    |   content: '🇸🇲';
    | }
    | .option-picker__option[data-value='ST']::before,
    | .option-picker__value[data-value='ST']::before {
    |   content: '🇸🇹';
    | }
    | .option-picker__option[data-value='SA']::before,
    | .option-picker__value[data-value='SA']::before {
    |   content: '🇸🇦';
    | }
    | .option-picker__option[data-value='SN']::before,
    | .option-picker__value[data-value='SN']::before {
    |   content: '🇸🇳';
    | }
    | .option-picker__option[data-value='RS']::before,
    | .option-picker__value[data-value='RS']::before {
    |   content: '🇷🇸';
    | }
    | .option-picker__option[data-value='SC']::before,
    | .option-picker__value[data-value='SC']::before {
    |   content: '🇸🇨';
    | }
    | .option-picker__option[data-value='SL']::before,
    | .option-picker__value[data-value='SL']::before {
    |   content: '🇸🇱';
    | }
    | .option-picker__option[data-value='SG']::before,
    | .option-picker__value[data-value='SG']::before {
    |   content: '🇸🇬';
    | }
    | .option-picker__option[data-value='SK']::before,
    | .option-picker__value[data-value='SK']::before {
    |   content: '🇸🇰';
    | }
    | .option-picker__option[data-value='SI']::before,
    | .option-picker__value[data-value='SI']::before {
    |   content: '🇸🇮';
    | }
    | .option-picker__option[data-value='SB']::before,
    | .option-picker__value[data-value='SB']::before {
    |   content: '🇸🇧';
    | }
    | .option-picker__option[data-value='SO']::before,
    | .option-picker__value[data-value='SO']::before {
    |   content: '🇸🇴';
    | }
    | .option-picker__option[data-value='ZA']::before,
    | .option-picker__value[data-value='ZA']::before {
    |   content: '🇿🇦';
    | }
    | .option-picker__option[data-value='SS']::before,
    | .option-picker__value[data-value='SS']::before {
    |   content: '🇸🇸';
    | }
    | .option-picker__option[data-value='GS']::before,
    | .option-picker__value[data-value='GS']::before {
    |   content: '🇬🇸';
    | }
    | .option-picker__option[data-value='ES']::before,
    | .option-picker__value[data-value='ES']::before {
    |   content: '🇪🇸';
    | }
    | .option-picker__option[data-value='LK']::before,
    | .option-picker__value[data-value='LK']::before {
    |   content: '🇱🇰';
    | }
    | .option-picker__option[data-value='SD']::before,
    | .option-picker__value[data-value='SD']::before {
    |   content: '🇸🇩';
    | }
    | .option-picker__option[data-value='SR']::before,
    | .option-picker__value[data-value='SR']::before {
    |   content: '🇸🇷';
    | }
    | .option-picker__option[data-value='SJ']::before,
    | .option-picker__value[data-value='SJ']::before {
    |   content: '🇩🇰';
    | }
    | .option-picker__option[data-value='SZ']::before,
    | .option-picker__value[data-value='SZ']::before {
    |   content: '🇸🇿';
    | }
    | .option-picker__option[data-value='SE']::before,
    | .option-picker__value[data-value='SE']::before {
    |   content: '🇸🇪';
    | }
    | .option-picker__option[data-value='CH']::before,
    | .option-picker__value[data-value='CH']::before {
    |   content: '🇨🇭';
    | }
    | .option-picker__option[data-value='SY']::before,
    | .option-picker__value[data-value='SY']::before {
    |   content: '🇸🇾';
    | }
    | .option-picker__option[data-value='TW']::before,
    | .option-picker__value[data-value='TW']::before {
    |   content: '🇹🇼';
    | }
    | .option-picker__option[data-value='TJ']::before,
    | .option-picker__value[data-value='TJ']::before {
    |   content: '🇹🇯';
    | }
    | .option-picker__option[data-value='TZ']::before,
    | .option-picker__value[data-value='TZ']::before {
    |   content: '🇹🇿';
    | }
    | .option-picker__option[data-value='TH']::before,
    | .option-picker__value[data-value='TH']::before {
    |   content: '🇹🇭';
    | }
    | .option-picker__option[data-value='TL']::before,
    | .option-picker__value[data-value='TL']::before {
    |   content: '🇹🇱';
    | }
    | .option-picker__option[data-value='TG']::before,
    | .option-picker__value[data-value='TG']::before {
    |   content: '🇹🇬';
    | }
    | .option-picker__option[data-value='TK']::before,
    | .option-picker__value[data-value='TK']::before {
    |   content: '🇹🇰';
    | }
    | .option-picker__option[data-value='TO']::before,
    | .option-picker__value[data-value='TO']::before {
    |   content: '🇹🇴';
    | }
    | .option-picker__option[data-value='TT']::before,
    | .option-picker__value[data-value='TT']::before {
    |   content: '🇹🇹';
    | }
    | .option-picker__option[data-value='TN']::before,
    | .option-picker__value[data-value='TN']::before {
    |   content: '🇹🇳';
    | }
    | .option-picker__option[data-value='TR']::before,
    | .option-picker__value[data-value='TR']::before {
    |   content: '🇹🇷';
    | }
    | .option-picker__option[data-value='TM']::before,
    | .option-picker__value[data-value='TM']::before {
    |   content: '🇹🇲';
    | }
    | .option-picker__option[data-value='TC']::before,
    | .option-picker__value[data-value='TC']::before {
    |   content: '🇹🇨';
    | }
    | .option-picker__option[data-value='TV']::before,
    | .option-picker__value[data-value='TV']::before {
    |   content: '🇹🇻';
    | }
    | .option-picker__option[data-value='UG']::before,
    | .option-picker__value[data-value='UG']::before {
    |   content: '🇺🇬';
    | }
    | .option-picker__option[data-value='UA']::before,
    | .option-picker__value[data-value='UA']::before {
    |   content: '🇺🇦';
    | }
    | .option-picker__option[data-value='AE']::before,
    | .option-picker__value[data-value='AE']::before {
    |   content: '🇦🇪';
    | }
    | .option-picker__option[data-value='GB']::before,
    | .option-picker__value[data-value='GB']::before {
    |   content: '🇬🇧';
    | }
    | .option-picker__option[data-value='US']::before,
    | .option-picker__value[data-value='US']::before {
    |   content: '🇺🇸';
    | }
    | .option-picker__option[data-value='UY']::before,
    | .option-picker__value[data-value='UY']::before {
    |   content: '🇺🇾';
    | }
    | .option-picker__option[data-value='UZ']::before,
    | .option-picker__value[data-value='UZ']::before {
    |   content: '🇺🇿';
    | }
    | .option-picker__option[data-value='VU']::before,
    | .option-picker__value[data-value='VU']::before {
    |   content: '🇻🇺';
    | }
    | .option-picker__option[data-value='VE']::before,
    | .option-picker__value[data-value='VE']::before {
    |   content: '🇻🇪';
    | }
    | .option-picker__option[data-value='VN']::before,
    | .option-picker__value[data-value='VN']::before {
    |   content: '🇻🇳';
    | }
    | .option-picker__option[data-value='VG']::before,
    | .option-picker__value[data-value='VG']::before {
    |   content: '🇻🇬';
    | }
    | .option-picker__option[data-value='VI']::before,
    | .option-picker__value[data-value='VI']::before {
    |   content: '🇻🇮';
    | }
    | .option-picker__option[data-value='WF']::before,
    | .option-picker__value[data-value='WF']::before {
    |   content: '🇼🇫';
    | }
    | .option-picker__option[data-value='YE']::before,
    | .option-picker__value[data-value='YE']::before {
    |   content: '🇾🇪';
    | }
    | .option-picker__option[data-value='ZM']::before,
    | .option-picker__value[data-value='ZM']::before {
    |   content: '🇿🇲';
    | }
    | .option-picker__option[data-value='ZW']::before,
    | .option-picker__value[data-value='ZW']::before {
    |   content: '🇿🇼';
    | }

block content
  p(role='alert') Do you like this project? Please support my #[a(href='https://github.com/mecha-cms') Mecha CMS] project too. Thank you!
  header
    hgroup
      h1= title
      p Accessible custom #[code &lt;select&gt;] (and #[code &lt;input list&gt;]) element.
    p Press #[kbd Enter] or #[kbd Space] key to open/close the options list. Use #[kbd ArrowDown] and #[kbd ArrowUp] keys to open the options list and then focus on an option, then press #[kbd Enter], #[kbd Space], or #[kbd Tab] to select it. On the “strict” option picker presentation (the example below), you should be able to type away when you focus on it to select the first active option that contains text that matches the search query you are currently typing. On the “loose” option picker presentation (#[a(href='test/input.html' target='_blank') this example]), when you start to input a value, the available options get filtered instead of selected immediately.
  main
    form(method='get' target='_blank')
      p(role='group')
        select(name='country')
          optgroup(label='A')
            option(value='AF') Afghanistan
            option(value='AX') Åland Islands
            option(value='AL') Albania
            option(value='DZ') Algeria
            option(value='AS') American Samoa
            option(value='AD') Andorra
            option(value='AO') Angola
            option(value='AI') Anguilla
            option(value='AQ') Antarctica
            option(value='AG') Antigua and Barbuda
            option(value='AR') Argentina
            option(value='AM') Armenia
            option(value='AW') Aruba
            option(value='AU') Australia
            option(value='AT') Austria
            option(value='AZ') Azerbaijan
          optgroup(label='B')
            option(value='BS') Bahamas
            option(value='BH') Bahrain
            option(value='BD') Bangladesh
            option(value='BB') Barbados
            option(value='BY') Belarus
            option(value='BE') Belgium
            option(value='BZ') Belize
            option(value='BJ') Benin
            option(value='BM') Bermuda
            option(value='BT') Bhutan
            option(value='BO') Bolivia, Plurinational State of bolivia
            option(value='BA') Bosnia and Herzegovina
            option(value='BW') Botswana
            option(value='BV') Bouvet Island
            option(value='BR') Brazil
            option(value='IO') British Indian Ocean Territory
            option(value='BN') Brunei Darussalam
            option(value='BG') Bulgaria
            option(value='BF') Burkina Faso
            option(disabled) Burma
            option(value='BI') Burundi
          optgroup(label='C')
            option(value='KH') Cambodia
            option(value='CM') Cameroon
            option(value='CA') Canada
            option(value='CV') Cape Verde
            option(value='KY') Cayman Islands
            option(value='CF') Central African Republic
            option(value='TD') Chad
            option(value='CL') Chile
            option(value='CN') China
            option(value='CX') Christmas Island
            option(value='CC') Cocos (Keeling) Islands
            option(value='CO') Colombia
            option(value='KM') Comoros
            option(value='CG') Congo
            option(value='CD') Congo, The Democratic Republic of the Congo
            option(value='CK') Cook Islands
            option(value='CR') Costa Rica
            option(value='CI') Cote d'Ivoire
            option(value='HR') Croatia
            option(value='CU') Cuba
            option(value='CY') Cyprus
            option(value='CZ') Czech Republic
          optgroup(label='D')
            option(value='DK') Denmark
            option(value='DJ') Djibouti
            option(value='DM') Dominica
            option(value='DO') Dominican Republic
          optgroup(label='E')
            option(value='EC') Ecuador
            option(value='EG') Egypt
            option(value='SV') El Salvador
            option(value='GQ') Equatorial Guinea
            option(value='ER') Eritrea
            option(value='EE') Estonia
            option(value='ET') Ethiopia
          optgroup(label='F')
            option(value='FK') Falkland Islands (Malvinas)
            option(value='FO') Faroe Islands
            option(value='FJ') Fiji
            option(value='FI') Finland
            option(value='FR') France
            option(value='GF') French Guiana
            option(value='PF') French Polynesia
            option(value='TF') French Southern Territories
          optgroup(label='G')
            option(value='GA') Gabon
            option(value='GM') Gambia
            option(value='GE') Georgia
            option(value='DE') Germany
            option(value='GH') Ghana
            option(value='GI') Gibraltar
            option(value='GR') Greece
            option(value='GL') Greenland
            option(value='GD') Grenada
            option(value='GP') Guadeloupe
            option(value='GU') Guam
            option(value='GT') Guatemala
            option(value='GG') Guernsey
            option(value='GN') Guinea
            option(value='GW') Guinea-Bissau
            option(value='GY') Guyana
          optgroup(label='H')
            option(value='HT') Haiti
            option(value='HM') Heard Island and Mcdonald Islands
            option(value='VA') Holy See (Vatican City State)
            option(value='HN') Honduras
            option(value='HK') Hong Kong
            option(value='HU') Hungary
          optgroup(label='I')
            option(value='IS') Iceland
            option(value='IN') India
            option(value='ID') Indonesia
            option(value='IR') Iran, Islamic Republic of Persian Gulf
            option(value='IQ') Iraq
            option(value='IE') Ireland
            option(value='IM') Isle of Man
            option(value='IL') Israel
            option(value='IT') Italy
          optgroup(label='J')
            option(value='JM') Jamaica
            option(value='JP') Japan
            option(value='JE') Jersey
            option(value='JO') Jordan
          optgroup(label='K')
            option(value='KZ') Kazakhstan
            option(value='KE') Kenya
            option(value='KI') Kiribati
            option(value='KP') Korea, Democratic People's Republic of Korea
            option(value='KR') Korea, Republic of South Korea
            option(value='XK') Kosovo
            option(value='KW') Kuwait
            option(value='KG') Kyrgyzstan
          optgroup(label='L')
            option(value='LA') Laos
            option(value='LV') Latvia
            option(value='LB') Lebanon
            option(value='LS') Lesotho
            option(value='LR') Liberia
            option(value='LY') Libyan Arab Jamahiriya
            option(value='LI') Liechtenstein
            option(value='LT') Lithuania
            option(value='LU') Luxembourg
          optgroup(label='M')
            option(value='MO') Macao
            option(value='MK') Macedonia
            option(value='MG') Madagascar
            option(value='MW') Malawi
            option(value='MY') Malaysia
            option(value='MV') Maldives
            option(value='ML') Mali
            option(value='MT') Malta
            option(value='MH') Marshall Islands
            option(value='MQ') Martinique
            option(value='MR') Mauritania
            option(value='MU') Mauritius
            option(value='YT') Mayotte
            option(value='MX') Mexico
            option(value='FM') Micronesia, Federated States of Micronesia
            option(value='MD') Moldova
            option(value='MC') Monaco
            option(value='MN') Mongolia
            option(value='ME') Montenegro
            option(value='MS') Montserrat
            option(value='MA') Morocco
            option(value='MZ') Mozambique
            option(value='MM') Myanmar
          optgroup(label='N')
            option(value='NA') Namibia
            option(value='NR') Nauru
            option(value='NP') Nepal
            option(value='NL') Netherlands
            option(value='AN') Netherlands Antilles
            option(value='NC') New Caledonia
            option(value='NZ') New Zealand
            option(value='NI') Nicaragua
            option(value='NE') Niger
            option(value='NG') Nigeria
            option(value='NU') Niue
            option(value='NF') Norfolk Island
            option(value='MP') Northern Mariana Islands
            option(value='NO') Norway
          optgroup(label='O')
            option(value='OM') Oman
          optgroup(label='P')
            option(value='PK') Pakistan
            option(value='PW') Palau
            option(value='PS') Palestinian Territory, Occupied
            option(value='PA') Panama
            option(value='PG') Papua New Guinea
            option(value='PY') Paraguay
            option(value='PE') Peru
            option(value='PH') Philippines
            option(value='PN') Pitcairn
            option(value='PL') Poland
            option(value='PT') Portugal
            option(value='PR') Puerto Rico
          optgroup(label='Q')
            option(value='QA') Qatar
          optgroup(label='R')
            option(value='RO') Romania
            option(value='RU') Russia
            option(value='RW') Rwanda
            option(value='RE') Reunion
          optgroup(label='S')
            option(value='BL') Saint Barthelemy
            option(value='SH') Saint Helena, Ascension and Tristan Da Cunha
            option(value='KN') Saint Kitts and Nevis
            option(value='LC') Saint Lucia
            option(value='MF') Saint Martin
            option(value='PM') Saint Pierre and Miquelon
            option(value='VC') Saint Vincent and the Grenadines
            option(value='WS') Samoa
            option(value='SM') San Marino
            option(value='ST') Sao Tome and Principe
            option(value='SA') Saudi Arabia
            option(value='SN') Senegal
            option(value='RS') Serbia
            option(value='SC') Seychelles
            option(value='SL') Sierra Leone
            option(value='SG') Singapore
            option(value='SK') Slovakia
            option(value='SI') Slovenia
            option(value='SB') Solomon Islands
            option(value='SO') Somalia
            option(value='ZA') South Africa
            option(value='SS') South Sudan
            option(value='GS') South Georgia and the South Sandwich Islands
            option(value='ES') Spain
            option(value='LK') Sri Lanka
            option(value='SD') Sudan
            option(value='SR') Suriname
            option(value='SJ') Svalbard and Jan Mayen
            option(value='SZ') Swaziland
            option(value='SE') Sweden
            option(value='CH') Switzerland
            option(value='SY') Syrian Arab Republic
          optgroup(label='T')
            option(value='TW') Taiwan
            option(value='TJ') Tajikistan
            option(value='TZ') Tanzania, United Republic of Tanzania
            option(value='TH') Thailand
            option(value='TL') Timor-Leste
            option(value='TG') Togo
            option(value='TK') Tokelau
            option(value='TO') Tonga
            option(value='TT') Trinidad and Tobago
            option(value='TN') Tunisia
            option(value='TR') Turkey
            option(value='TM') Turkmenistan
            option(value='TC') Turks and Caicos Islands
            option(value='TV') Tuvalu
          optgroup(label='U')
            option(value='UG') Uganda
            option(value='UA') Ukraine
            option(value='AE') United Arab Emirates
            option(value='GB') United Kingdom
            option(value='US') United States
            option(value='UY') Uruguay
            option(value='UZ') Uzbekistan
          optgroup(label='V')
            option(value='VU') Vanuatu
            option(value='VE') Venezuela, Bolivarian Republic of Venezuela
            option(value='VN') Vietnam
            option(value='VG') Virgin Islands, British
            option(value='VI') Virgin Islands, U.S.
          optgroup(label='W')
            option(value='WF') Wallis and Futuna
          optgroup(label='X')
          optgroup(label='Y')
            option(value='YE') Yemen
            option(disabled) Yugoslavia
          optgroup(label='Z')
            option(value='ZM') Zambia
            option(value='ZW') Zimbabwe
        = ' '
        button(type='submit') Submit
        = ' '
        button(type='reset') Reset
    h2#usage
      a(href='#usage') #
      = ' Usage'
    div(role='note')
      p #[strong Note:] CSS variables have been removed since version 2.0.0. From now on, I will only provide a minimal style just to make viable interaction. Expect it to look ugly by default. The main goal of this application is to be able to integrate it seamlessly into your web design. By providing a minimal style, it is easy to add other styles to it to adapt it to your own web design. Have a look at the source code on this page to see how I adapted the style to resemble the default style of the previous version.
    h3 Browser
    pre: code
      | &lt;!DOCTYPE html&gt;
      | &lt;html dir="ltr"&gt;
      |   &lt;head&gt;
      |     &lt;meta charset="utf-8"&gt;
      |     &lt;link href="#[a(href='index.min.css' target='_blank') ./index.min.css]" rel="stylesheet"&gt;
      |     &lt;style&gt;
      |       .option-picker {
      |         width: 100%;
      |       }
      |       .option-picker__options {
      |         background: #fff;
      |       }
      |     &lt;/style&gt;
      |   &lt;/head&gt;
      |   &lt;body&gt;
      |     &lt;p&gt;
      |       &lt;select&gt;
      |         &lt;option&gt;
      |           Option 1
      |         &lt;/option&gt;
      |         &lt;option&gt;
      |           Option 2
      |         &lt;/option&gt;
      |         &lt;option value="3"&gt;
      |           Option 3
      |         &lt;/option&gt;
      |       &lt;/select&gt;
      |     &lt;/p&gt;
      |     &lt;script src="#[a(href='index.min.js' target='_blank') ./index.min.js]"&gt;&lt;/script&gt;
      |     &lt;script&gt;
      |       const picker = new OptionPicker(document.querySelector('select'));
      |     &lt;/script&gt;
      |   &lt;/body&gt;
      | &lt;/html&gt;
    h3 Node.js
    p Functions and methods in this application are mostly native JavaScript and are intended for use by the browser. Node.js doesn’t know about the DOM, so this kind of practice will probably be used more often to build new browser packages than to be used directly in the Node.js server.
    h4 CommonJS
    pre: code
      | const OptionPicker = require('@taufik-nurrohman/option-picker').default;
      |
      | const picker = new OptionPicker(document.querySelector('select'));
    h4 ECMAScript
    pre: code
      | import OptionPicker from '@taufik-nurrohman/option-picker';
      |
      | const picker = new OptionPicker(document.querySelector('select'));
    h2#tests
      a(href='#tests') #
      = ' Tests'
    ul
      li: a(href='test.html' target='_blank') No Idea?
      li: a(href='test/attach,detach.html' target='_blank') Attach, Detach
      li: a(href='test/disabled.html' target='_blank') Disabled State
      li: a(href='test/focus.html' target='_blank') Focus Automatically
      li: a(href='test/group.html' target='_blank') Grouped Options
      li: a(href='test/hooks.html' target='_blank') Hooks
      li: a(href='test/self.html' target='_blank') Multiple Instances
      li: a(href='test/input.html' target='_blank') Options from #[code &lt;datalist&gt;]
      li: a(href='test/strict.html' target='_blank') Options from #[code &lt;datalist&gt;] (Strict)
      li: a(href='test/options.html' target='_blank') Options from JavaScript
      li: a(href='test/options.lazy.html' target='_blank') Options from JavaScript (Lazy)
      li: a(href='test/read-only.html' target='_blank') Read-Only State
      li: a(href='test/selected.html' target='_blank') Selected State
      li: a(href='test/size.html' target='_blank') Visible Options
    h2#tweaks
      a(href='#tweaks') #
      = ' Tweaks'
    ul
      li: a(href='tweak/bootstrap5.html' target='_blank') Bootstrap v5.3 Style
    h2#constructor
      a(href='#constructor') #
      = ' Constructor'
    pre: code
      | const picker = new OptionPicker(self, state = {
      |     options: null,
      |     size: null,
      |     strict: false,
      |     with: []
      | });
    h2#parameters
      a(href='#parameters') #
      = ' Parameters'
    h3: code self
    p The #[code &lt;input&gt;] or #[code &lt;select&gt;] element.
    h3: code state
    p The configuration data.
    h3: code state.options
    p A list of options data as an array, an object, a map, or a function that returns an array, an object, or a map.
    p #[strong Array] is the easiest data structure to write, it guarantees that the order will remain the same when transformed into a series of options. With this kind of data structure, where each element is a scalar, the option label will also act as a value after it is transformed into an options list. This is equivalent to creating an #[code &lt;option&gt;] element without a #[code value] attribute.
    pre: code
      | const options = [
      |     'Option 1',
      |     'Option 2',
      |     'Option 3'
      | ];
      |
      | const picker = new OptionPicker(document.querySelector('select'), {options});
    pre: code
      | const options = [
      |     ['Option 1', {
      |         value: 1
      |     }],
      |     ['Option 2', {
      |         value: 2
      |     }],
      |     ['Option 3', {
      |         disabled: true,
      |         value: 3
      |     }]
      | ];
      |
      | const picker = new OptionPicker(document.querySelector('select'), {options});
    p #[strong Object] is another data structure that is also easy to write. The object item keys act as option values, and the object item values act as option labels. The only problem with this data structure is that it cannot guarantee that the order will remain the same when transformed into a series of options, especially if each object key is written as a number.
    pre: code
      | const options = {
      |     '1': 'Option 1',
      |     '2': 'Option 2',
      |     '3': 'Option 3'
      | };
      |
      | const picker = new OptionPicker(document.querySelector('select'), {options});
    p The solution would be to set the object item key as text and then set the object item value in the attributes object.
    pre: code
      | const options = {
      |     'option-1': ['Option 1', {
      |         value: 1
      |     }],
      |     'option-2': ['Option 2', {
      |         value: 2
      |     }],
      |     'option-3': ['Option 3', {
      |         disabled: true,
      |         value: 3
      |     }]
      | };
      |
      | const picker = new OptionPicker(document.querySelector('select'), {options});
    p #[strong Map] is another type of data structure, similar to an object, but it guarantees that the order will remain the same when transformed into a series of options.
    pre: code
      | const options = new Map;
      |
      | options.set(1, 'Option 1');
      | options.set(2, 'Option 2');
      | options.set(3, 'Option 3');
      |
      | const picker = new OptionPicker(document.querySelector('select'), {options});
    pre: code
      | const options = new Map;
      |
      | options.set(1, ['Option 1', {
      |     value: 1
      | }]);
      |
      | options.set(2, ['Option 2', {
      |     value: 2
      | }]);
      |
      | options.set(3, ['Option 3', {
      |     disabled: true,
      |     value: 3
      | }]);
      |
      | const picker = new OptionPicker(document.querySelector('select'), {options});
    p #[strong Function] that returns one of the three data structures above can also be used. The first argument of this function holds the typed search query. Useful for creating dynamic options list capabilities using #[a(href='https://en.wikipedia.org/wiki/Ajax_(programming)' rel='nofollow' target='_blank') AJAX].
    pre: code
      | const options = function (query) {
      |     return [
      |         'Option 1',
      |         'Option 2',
      |         'Option 3'
      |     ];
      | };
      |
      | const picker = new OptionPicker(document.querySelector('select'), {options});
    pre: code
      | const options = function (query) {
      |     return fetch('./options.php?query=' + encodeURIComponent(query)).then(response =&gt; response.json());
      | };
      |
      | const picker = new OptionPicker(document.querySelector('select'), {options});
    h3: code state.size
    p Set the value to an integer greater than #[code 1] to display the options list as a scrollable area that is always visible. This layout takes up space and is provided to mimic the behavior of a #[code &lt;select&gt;] element when given the #[code size] attribute. It has a default value of #[code null]. If #[code self] is a #[code &lt;select&gt;] element, then the application will try to use the #[code size] attribute value of that element. This does not apply if #[code self] is an #[code &lt;input&gt;] element, because #[code size] attribute on an #[code &lt;input&gt;] element has different semantics. #[sup #[a(href='https://html.spec.whatwg.org#attr-input-size' rel='nofollow' target='_blank') 1]] #[sup #[a(href='https://html.spec.whatwg.org#attr-select-size' rel='nofollow' target='_blank') 2]]
    h3: code state.strict
    p Do not allow users to enter a value other than those available in the options list on the “loose” option picker presentation. Pressing the #[kbd Tab] key will automatically select the first active option.
    h3: code state.with
    p List of callable functions or objects containing an #[code attach()] method to be invoked each time the application is initialized. A very simple “plugin” system.
    h2#methods
      a(href='#methods') #
      = ' Methods'
    h3 Instance Methods
    p Instance methods are methods available through the results of an #[code OptionPicker] construct.
    h4: code picker.attach(self, state)
    p Re-initializes the application and its extensions after it has been detached.
    pre: code
      | picker.attach();
    h4: code picker.blur()
    p Blurs from the option picker’s input or self.
    pre: code
      | picker.blur();
    h4: code picker.detach()
    p Disables the application methods (except for the #[code attach()] method) and executes the #[code detach()] method of the extensions, if they are present.
    pre: code
      | picker.detach();
    h4: code picker.enter(focus, mode = true)
    p Shows the option picker’s options.
    pre: code
      | picker.enter(); // Show the option picker’s options
      | picker.enter(true); // Show the option picker’s options and focus to the option picker’s input or mask
    h4: code picker.exit(focus, mode = true)
    p Hides the option picker’s options.
    pre: code
      | picker.exit(); // Hide the option picker’s options
      | picker.exit(true); // Hide the option picker’s options and focus to the option picker’s input or mask
    h4: code picker.fire(event, data, then)
    p Fires an event.
    pre: code
      | picker.fire('change', []);
    h4: code picker.focus(mode = true)
    p Focuses to the option picker’s input or self. The #[code mode] value has no effect on the “strict” option picker presentation.
    pre: code
      | picker.focus(); // Focus and select the text
      | picker.focus(-1); // Focus and put the caret to the start of the text
      | picker.focus(+1); // Focus and put the caret to the end of the text
    h4: code picker.off(event, then)
    p Removes an event.
    pre: code
      | picker.off('change'); // Remove all events from the `change` event container
      | picker.off('change', onChange); // Remove `onChange` event from the `change` event container
    h4: code picker.on(event, then)
    p Adds a new event.
    pre: code
      | picker.on('change', function () {
      |     console.log(this.value);
      | });
    pre: code
      | function onChange() {
      |     console.log(this.value);
      | }
      |
      | picker.on('change', onChange);
    h4: code picker.reset(focus, mode = true)
    p Resets the option picker’s value or values to its initial value or values.
    pre: code
      | picker.reset(); // Reset the option picker’s value or values
      | picker.reset(true); // Reset the option picker’s value or values and focus to the option picker’s input or mask
    h3 Static Methods
    p Static methods are methods available directly on the #[code OptionPicker] object.
    h4: code OptionPicker.from(self, state)
    p Creates a new #[code OptionPicker] instance.
    pre: code
      | const picker = OptionPicker.from(document.querySelector('select'));
    h4: code OptionPicker.of(self)
    p Gets #[code OptionPicker] instance of an element.
    pre: code
      | document.querySelectorAll('input[list], select').forEach(self =&gt; {
      |     const picker = OptionPicker.of(self);
      | });
    h2#properties
     a(href='#properties') #
     = ' Properties'
    h3 Instance Properties
    p Instance properties are properties available through the results of an #[code OptionPicker] construct.
    h4: code picker.hooks
    p Returns the events data.
    pre: code
      | console.log(picker.hooks);
    h4: code picker.mask
    p Returns the option picker’s mask.
    pre: code
      | picker.mask.classList.add(picker.state.n + '--dark');
    h4: code picker.options
    p Gets the current options list data, or sets (overwrites) the current options list with new data.
    pre: code
      | console.log(picker.options);
    pre: code
      | picker.options = [
      |     'Option 1',
      |     'Option 2',
      |     'Option 3'
      | ];
      |
      | // Or…
      | picker.options.set('Option 1');
      | picker.options.set('Option 2');
      | picker.options.set('Option 3');
    pre: code
      | picker.options = [
      |     ['Option 1', {
      |         value: 1
      |     }],
      |     ['Option 2', {
      |         value: 2
      |     }],
      |     ['Option 3', {
      |         disabled: true,
      |         value: 3
      |     }]
      | ];
      |
      | // Or…
      | picker.options.set(1, 'Option 1');
      | picker.options.set(2, 'Option 2');
      | picker.options.set(3, ['Option 3', {
      |     disabled: true
      | }]);
    pre: code
      | picker.options = {
      |     '1': 'Option 1',
      |     '2': 'Option 2',
      |     '3': 'Option 3'
      | };
      |
      | // Or…
      | picker.options.set(1, 'Option 1');
      | picker.options.set(2, 'Option 2');
      | picker.options.set(3, 'Option 3');
    pre: code
      | picker.options = {
      |     'option-1': ['Option 1', {
      |         value: 1
      |     }],
      |     'option-2': ['Option 2', {
      |         value: 2
      |     }],
      |     'option-3': ['Option 3', {
      |         disabled: true,
      |         value: 3
      |     }]
      | };
      |
      | // Or…
      | picker.options.set('option-1', ['Option 1', {
      |     value: 1
      | }]);
      |
      | picker.options.set('option-2', ['Option 2', {
      |     value: 2
      | }]);
      |
      | picker.options.set('option-3', ['Option 3', {
      |     disabled: true,
      |     value: 3
      | }]);
    pre: code
      | const options = new Map;
      |
      | options.set(1, 'Option 1');
      | options.set(2, 'Option 2');
      | options.set(3, 'Option 3');
      |
      | picker.options = options;
    pre: code
      | const options = new Map;
      |
      | options.set(1, ['Option 1', {
      |     value: 1
      | }]);
      |
      | options.set(2, ['Option 2', {
      |     value: 2
      | }]);
      |
      | options.set(3, ['Option 3', {
      |     disabled: true,
      |     value: 3
      | }]);
      |
      | picker.options = options;
    h4: code picker.self
    p Returns the #[code &lt;input&gt;] or #[code &lt;select&gt;] element.
    pre: code
      | console.log(picker.self.getAttribute('name'));
    h4: code picker.size
    p Changes the layout of a drop-down select box to a scrollable area select box. This is valid only if the value is an integer greater than #[code 1]. Otherwise, it will be considered as an invalid value and will revert the layout to its default layout, which is a drop-down select box.
    pre: code
      | picker.size = 5;
    h4: code picker.state
    p Returns the application states if any.
    pre: code
      | console.log(picker.state);
    h4: code picker.text
    p Gets or sets the current text in the “loose” option picker’s input.
    pre: code
      | console.log(picker.text);
    pre: code
      | picker.text = 'Option 3';
    h4: code picker.value
    p Proxy that passes to the #[code picker.self.value] property, with additional actions that are executed while the value is being set.
    pre: code
      | console.log(picker.value);
    pre: code
      | picker.on('change', function () {
      |     console.log(this.value);
      | });
      |
      | picker.value = '3';
    h3 Static Properties
    p Static properties are properties available directly on the #[code OptionPicker] object.
    h4: code OptionPicker._
    p Alias for #[code OptionPicker.prototype].
    pre: code
      | OptionPicker._.clear = function () {
      |     if ('input' !== this.self.tagName.toLowerCase()) {
      |         return this;
      |     }
      |     return (this.value = ""), this;
      | };
      |
      | const picker = new OptionPicker(document.querySelector('input'));
      |
      | picker.clear(); // Clear value
    h4: code OptionPicker.state
    p Returns the default values of #[code picker.state].
    pre: code
      | const picker = new OptionPicker(document.querySelector('select'), {
      |     foo: ['bar', 'baz', 'qux']
      | });
      |
      | console.log([OptionPicker.state, picker.state]);
    h4: code OptionPicker.version
    p Returns the application version.
    h2#extensions
      a(href='#extensions') #
      = ' Extensions'
    h3 Anatomy of an Extension
    p Extension as a function:
    pre: code
      | function Extension(self, state = {}) {
      |     this.a = 1;
      |     this.b = function () {};
      |     return this;
      | }
      |
      | Object.defineProperty(Extension, 'name', {
      |     value: 'Extension'
      | });
    p Extension as an object:
    pre: code
      | const Extension = {
      |     attach: function (self, state = {}) {},
      |     detach: function (self, state = {}) {},
      |     name: 'Extension'
      | };
    h3 Usage of an Extension
    p As a core extension:
    pre: code
      | OptionPicker.state.with.push(Extension);
    p As an optional extension:
    pre: code
      | const picker = new OptionPicker(document.querySelector('select'), {
      |     with: [Extension]
      | });
    h3 List of Extensions
    ul
      li: a(aria-disabled='true') Clear Feature
      li: a(aria-disabled='true') Custom Scroll Bar
      li: a(aria-disabled='true') Highlight Search Term
    h2#license
      a(href='#license') #
      = ' License'
    p Use it for free, pay if you get paid. So, you’ve just benefited financially after using this project? It’s a good idea to #[a(href='https://paypal.me/tatautaufik' target='_blank') share a little financial support] with this open source project too. Your support will motivate me to do any further development, as well as to provide voluntary support to overcome problems related to this project.
    p Thank you! ❤️
  footer
    hr
    p
      != '© ' + year + ' '
      a(href='/') Taufik Nurrohman