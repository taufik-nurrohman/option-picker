extends _index.pug

block state
  - const title = 'Option Picker ' + version
  - const theme = '#000'
  - const scripts = ['index.js']
  - const styles = ['index.min.css']

block script
  script
    | const sources = document.querySelectorAll('select');
    | sources.forEach(source => {
    |     const picker = new OP(source);
    |     picker.on('change', (value, values) => {
    |         console.log([value, values]);
    |     });
    | });

block style
  style
    | * {
    |   box-sizing: border-box;
    | }
    | :root {
    |   background: #fff;
    |   border-top: 4px solid;
    |   color: #000;
    |   font: normal normal 16px/1.25 serif;
    | }
    | a {
    |   color: #009;
    |   text-decoration: none;
    | }
    | a, code {
    |   word-wrap: break-word;
    | }
    | code {
    |   font-family: monospace;
    |   font-size: 80%;
    | }
    | footer, header, main, nav {
    |   margin: 0 auto;
    |   max-width: 700px;
    | }
    | hr {
    |   border: 0;
    |   border-top: 1px dashed;
    |   color: inherit;
    |   height: 0;
    | }
    | pre {
    |   white-space: pre-wrap;
    |   word-wrap: break-word;
    | }
    | pre code {
    |   background: #eee;
    |   display: block;
    |   padding: 1em;
    | }
    | table {
    |   width: 100%;
    | }
    | td, th {
    |   text-align: left;
    |   vertical-align: top;
    | }
    | body > p:first-child {
    |   background: #ffa;
    |   border: 1px dashed;
    |   margin-top: 0;
    |   padding: .75em 1em;
    | }
    |
    | /* Add Bootstrap-like focus ring effect */
    | .option-picker--focus {
    |   --shadow-option-picker--focus: 0 0 0 3px rgba(0, 0, 255, .25);
    |   --shadow-option-picker: 0 0 0 3px rgba(0, 0, 255, .25);
    | }

block content
  p Do you like this project? Please support my #[a(href='https://github.com/mecha-cms') Mecha CMS] project too. Thank you!
  header
    h1= title
    p Just a generic custom #[code &lt;select&gt;] element with accessibility in mind.
    hr
  main
    form(method='get' target='_blank')
      p
        select(name='test-1')
          option(value='1') Option 1
          option(value='2') Option 2
          option(value='3') Option 3
          option(disabled value='4') Option 4
          option Option 5
      p
        select(name='test-2')
          optgroup(label='Group 1')
            option(value='1') Option 1
            option(value='2') Option 2
            option(value='3') Option 3
            option(disabled value='4') Option 4
            option Option 5
          optgroup(label='Group 2')
            option(value='#f00') Red
            option(value='#0f0') Green
            option(value='#00f') Blue
      p: button(type='submit') Submit
    h2 Features
    ul
      li Light-weight, no dependencies.
      li Simple #[abbr(title='Application Programming Interface') API]. Easy to master.
      li Responsive. It tries to place the option menus inside an area that is visible within the browser window.
      li Care about accessibility. Interacts very well using the keyboard keys. Free from the focus traps.
    h2 Usage
    h3 Browser
    pre: code
      | &lt;!DOCTYPE html&gt;
      | &lt;html dir="ltr"&gt;
      |   &lt;head&gt;
      |     &lt;meta charset="utf-8"&gt;
      |     &lt;link href="#[a(href='index.min.css' target='_blank') ./index.min.css]" rel="stylesheet"&gt;
      |   &lt;/head&gt;
      |   &lt;body&gt;
      |     &lt;p&gt;
      |       &lt;select&gt;
      |         &lt;option&gt;Option 1&lt;/option&gt;
      |         &lt;option&gt;Option 2&lt;/option&gt;
      |         &lt;option value="3"&gt;Option 3&lt;/option&gt;
      |       &lt;/select&gt;
      |     &lt;/p&gt;
      |     &lt;script src="#[a(href='index.min.js' target='_blank') ./index.min.js]"&gt;&lt;/script&gt;
      |     &lt;script&gt;
      |       const picker = new OP(document.querySelector('select'));
      |     &lt;/script&gt;
      |   &lt;/body&gt;
      | &lt;/html&gt;
    h3 Node.js
    p Functions and methods in this application are mostly native JavaScript and are intended for use by the browser. Node.js doesn&rsquo;t know about the DOM, so this kind of practice will probably be used more often to build new browser packages than to be used directly in the Node.js server.
    h4 CommonJS
    pre: code
      | const OP = require('@taufik-nurrohman/option-picker');
      |
      | const picker = new OP(document.querySelector('select'));
    h4 ECMAScript
    pre: code
      | import OP from '@taufik-nurrohman/option-picker';
      |
      | const picker = new OP(document.querySelector('select'));
    h2 Examples
    ul
      li: a(href='test.html' target='_blank') No Idea?
      li: a(href='test/group.html' target='_blank') Grouped Options
      li: a(href='test/size.html' target='_blank') Visible Options
      li: a(href='test/multiple.html' target='_blank') Multiple Selection
      li: a(href='test/disabled.html' target='_blank') Disabled States
      li: a(href='tweak/placeholder.html' target='_blank') Placeholder Example
      li: a(href='tweak/icons.html' target='_blank') With Icons
    h2 Settings
    pre: code let picker = new OP(#[var source]);
    pre: code
      | let picker = new OP(#[var source], #[var state] = {
      |         join: ', ',
      |         parent: null,
      |         size: 5
      |     });
    table(border='1')
      thead
        tr
          th Name
          th Description
      tbody
        tr
          td: code source
          td The source element that holds the initial option data.
        tr
          td: code state
          td The configuration data.
        tr
          td: code state.join
          td The separator character between values for multiple selection.
        tr
          td: code state.parent
          td The parent element as the source of the &ldquo;click-outside&rdquo; event handler to close the select box options that is currently open. It will use the #[code document] by default.
        tr
          td: code state.size
          td Default #[code size] value if #[code &lt;select multiple&gt;] element does not have #[code size] attribute defined.
    h2 Methods and Properties
    h3 OP.instances
    p Return the option picker instances.
    pre: code
      | for (let key in OP.instances) {
      |     console.log(key);
      |     console.log(OP.instances[key]);
      | }
    h3 OP.state
    p This property stores the initial values of #[code picker.state].
    pre: code
      | const picker = new OP(source, {
      |         foo: ['bar', 'baz', 'qux']
      |     });
      |
      | console.log([OP.state, picker.state]);
    h3 OP.version
    p Return the option picker version.
    pre: code
      | let version = OP.version,
      |     major = version.split('.')[0];
      |
      | if (+major &lt; 2) {
      |     // &hellip;
      | }
    h3 picker.get(eval = true)
    p Get current option value.
    pre: code console.log(picker.get());
    h3 picker.options
    p Return all of the available options.
    h3 picker.pop()
    p Remove custom option picker features from the source element.
    h3 picker.self
    p Return the option picker element.
    pre: code picker.self.style.borderWidth = '4px';
    h3 picker.set(value)
    p Set option picker&rsquo;s value.
    pre: code
      | picker.set('Option 1');
    h3 picker.source
    p Return the option picker source element that holds the initial option value.
    pre: code
      | picker.source.addEventListener('change', function() {
      |     console.log(this.value);
      | }, false);
    h3 picker.state
    p Return the modified option picker states.
    h2 Hooks
    table(border='1')
      thead
        tr
          th Name
          th Description
      tbody
        tr
          td: code blur
          td Will be triggered on every blur event.
        tr
          td: code change
          td Will be triggered on every value change.
        tr
          td: code enter
          td Will be triggered when option picker list is opened.
        tr
          td: code exit
          td Will be triggered when option picker list is closed.
        tr
          td: code fit
          td Will be triggered when option picker pane is positioned.
        tr
          td: code focus
          td Will be triggered on every focus event.
        tr
          td: code pop
          td Will be triggered after #[code picker.pop()].
    h3 picker.fire(event, data)
    p Trigger a hook.
    pre: code picker.fire('change', ['Option 1', picker.options]);
    h3 picker.hooks
    p Return the added hooks.
    pre: code console.log(picker.hooks);
    h3 picker.off(event, then)
    p Remove a hook.
    pre: code picker.off('change');
    pre: code picker.off('change', onChange); // With context
    h3 picker.on(event, then)
    p Add a new hook.
    pre: code
      | picker.on('change', function(option, options) {
      |     console.log(option);
      | });
    pre: code
      | function onChange(option, options) {
      |     console.log(option);
      | }
      |
      | picker.on('change', onChange); // With context
    h2 License
    p Use it for free, pay if you get paid. So, you&rsquo;ve just benefited financially after using this project? It&rsquo;s a good idea to #[a(href='https://paypal.me/tatautaufik' target='_blank') share a little financial support] with this open source project too. Your support will motivate me to do any further development, as well as to provide voluntary support to overcome problems related to this project.
    p Thank you! ❤️
  footer
    hr
    p
      != '&copy; ' + year + ' '
      a(href='/') Taufik Nurrohman